/* 
 * Stocks
 *
 * <h3>Rate limits</h3>                     Free subscriptions are subject to daily limits. To know how much requests you have left look at the following headers in the response.<br />                     1. <strong>x-ratelimit-limit</strong> - The total number of requests that you are allowed to make in a given period (hour/day)<br />                     2. <strong>x-ratelimit-remaining</strong> - The number of remaining requests that you can perform in the current period.<br />                     3. <strong>x-ratelimit-reset</strong> - The number of seconds until the current period resets.<br />                     <br />                     <br />                     You don't have an API key? <a href=\"https://www.equibles.com/api/pricing\" target=\"_blank\">Get one for free here.</a>
 *
 * OpenAPI spec version: v1
 * Contact: contact@equibles.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Equibles.Stocks.Client.SwaggerDateConverter;

namespace Equibles.Stocks.Model
{
    /// <summary>
    /// BalanceSheet
    /// </summary>
    [DataContract]
        public partial class BalanceSheet :  IEquatable<BalanceSheet>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BalanceSheet" /> class.
        /// </summary>
        /// <param name="assets">assets.</param>
        /// <param name="tangibleAssets">tangibleAssets.</param>
        /// <param name="currentAssets">currentAssets.</param>
        /// <param name="cashAndCashEquivalents">cashAndCashEquivalents.</param>
        /// <param name="cashAndShortTermInvestments">cashAndShortTermInvestments.</param>
        /// <param name="inventory">inventory.</param>
        /// <param name="currentNetReceivables">currentNetReceivables.</param>
        /// <param name="nonCurrentAssets">nonCurrentAssets.</param>
        /// <param name="propertyPlantEquipment">propertyPlantEquipment.</param>
        /// <param name="accumulatedDepreciationAmortization">accumulatedDepreciationAmortization.</param>
        /// <param name="intangibleAssets">intangibleAssets.</param>
        /// <param name="intangibleAssetsExcludingGoodwill">intangibleAssetsExcludingGoodwill.</param>
        /// <param name="goodwill">goodwill.</param>
        /// <param name="investments">investments.</param>
        /// <param name="longTermInvestments">longTermInvestments.</param>
        /// <param name="shortTermInvestments">shortTermInvestments.</param>
        /// <param name="otherCurrentAssets">otherCurrentAssets.</param>
        /// <param name="otherNonCurrentAssets">otherNonCurrentAssets.</param>
        /// <param name="liabilities">liabilities.</param>
        /// <param name="currentLiabilities">currentLiabilities.</param>
        /// <param name="currentAccountsPayable">currentAccountsPayable.</param>
        /// <param name="deferredRevenue">deferredRevenue.</param>
        /// <param name="currentDebt">currentDebt.</param>
        /// <param name="shortTermDebt">shortTermDebt.</param>
        /// <param name="nonCurrentLiabilities">nonCurrentLiabilities.</param>
        /// <param name="capitalLeaseObligations">capitalLeaseObligations.</param>
        /// <param name="longTermDebt">longTermDebt.</param>
        /// <param name="currentLongTermDebt">currentLongTermDebt.</param>
        /// <param name="longTermDebtNonCurrent">longTermDebtNonCurrent.</param>
        /// <param name="shortLongTermDebtTotal">shortLongTermDebtTotal.</param>
        /// <param name="otherCurrentLiabilities">otherCurrentLiabilities.</param>
        /// <param name="otherNonCurrentLiabilities">otherNonCurrentLiabilities.</param>
        /// <param name="equity">equity.</param>
        /// <param name="treasuryStock">treasuryStock.</param>
        /// <param name="retainedEarnings">retainedEarnings.</param>
        /// <param name="commonStock">commonStock.</param>
        /// <param name="sharesOutstanding">sharesOutstanding.</param>
        /// <param name="accumulatedOtherComprehensiveIncome">accumulatedOtherComprehensiveIncome.</param>
        /// <param name="workingCapital">workingCapital.</param>
        public BalanceSheet(long? assets = default(long?), long? tangibleAssets = default(long?), long? currentAssets = default(long?), long? cashAndCashEquivalents = default(long?), long? cashAndShortTermInvestments = default(long?), long? inventory = default(long?), long? currentNetReceivables = default(long?), long? nonCurrentAssets = default(long?), long? propertyPlantEquipment = default(long?), long? accumulatedDepreciationAmortization = default(long?), long? intangibleAssets = default(long?), long? intangibleAssetsExcludingGoodwill = default(long?), long? goodwill = default(long?), long? investments = default(long?), long? longTermInvestments = default(long?), long? shortTermInvestments = default(long?), long? otherCurrentAssets = default(long?), long? otherNonCurrentAssets = default(long?), long? liabilities = default(long?), long? currentLiabilities = default(long?), long? currentAccountsPayable = default(long?), long? deferredRevenue = default(long?), long? currentDebt = default(long?), long? shortTermDebt = default(long?), long? nonCurrentLiabilities = default(long?), long? capitalLeaseObligations = default(long?), long? longTermDebt = default(long?), long? currentLongTermDebt = default(long?), long? longTermDebtNonCurrent = default(long?), long? shortLongTermDebtTotal = default(long?), long? otherCurrentLiabilities = default(long?), long? otherNonCurrentLiabilities = default(long?), long? equity = default(long?), long? treasuryStock = default(long?), long? retainedEarnings = default(long?), long? commonStock = default(long?), long? sharesOutstanding = default(long?), long? accumulatedOtherComprehensiveIncome = default(long?), long? workingCapital = default(long?))
        {
            this.Assets = assets;
            this.TangibleAssets = tangibleAssets;
            this.CurrentAssets = currentAssets;
            this.CashAndCashEquivalents = cashAndCashEquivalents;
            this.CashAndShortTermInvestments = cashAndShortTermInvestments;
            this.Inventory = inventory;
            this.CurrentNetReceivables = currentNetReceivables;
            this.NonCurrentAssets = nonCurrentAssets;
            this.PropertyPlantEquipment = propertyPlantEquipment;
            this.AccumulatedDepreciationAmortization = accumulatedDepreciationAmortization;
            this.IntangibleAssets = intangibleAssets;
            this.IntangibleAssetsExcludingGoodwill = intangibleAssetsExcludingGoodwill;
            this.Goodwill = goodwill;
            this.Investments = investments;
            this.LongTermInvestments = longTermInvestments;
            this.ShortTermInvestments = shortTermInvestments;
            this.OtherCurrentAssets = otherCurrentAssets;
            this.OtherNonCurrentAssets = otherNonCurrentAssets;
            this.Liabilities = liabilities;
            this.CurrentLiabilities = currentLiabilities;
            this.CurrentAccountsPayable = currentAccountsPayable;
            this.DeferredRevenue = deferredRevenue;
            this.CurrentDebt = currentDebt;
            this.ShortTermDebt = shortTermDebt;
            this.NonCurrentLiabilities = nonCurrentLiabilities;
            this.CapitalLeaseObligations = capitalLeaseObligations;
            this.LongTermDebt = longTermDebt;
            this.CurrentLongTermDebt = currentLongTermDebt;
            this.LongTermDebtNonCurrent = longTermDebtNonCurrent;
            this.ShortLongTermDebtTotal = shortLongTermDebtTotal;
            this.OtherCurrentLiabilities = otherCurrentLiabilities;
            this.OtherNonCurrentLiabilities = otherNonCurrentLiabilities;
            this.Equity = equity;
            this.TreasuryStock = treasuryStock;
            this.RetainedEarnings = retainedEarnings;
            this.CommonStock = commonStock;
            this.SharesOutstanding = sharesOutstanding;
            this.AccumulatedOtherComprehensiveIncome = accumulatedOtherComprehensiveIncome;
            this.WorkingCapital = workingCapital;
        }
        
        /// <summary>
        /// Gets or Sets Assets
        /// </summary>
        [DataMember(Name="assets", EmitDefaultValue=false)]
        public long? Assets { get; set; }

        /// <summary>
        /// Gets or Sets TangibleAssets
        /// </summary>
        [DataMember(Name="tangibleAssets", EmitDefaultValue=false)]
        public long? TangibleAssets { get; set; }

        /// <summary>
        /// Gets or Sets CurrentAssets
        /// </summary>
        [DataMember(Name="currentAssets", EmitDefaultValue=false)]
        public long? CurrentAssets { get; set; }

        /// <summary>
        /// Gets or Sets CashAndCashEquivalents
        /// </summary>
        [DataMember(Name="cashAndCashEquivalents", EmitDefaultValue=false)]
        public long? CashAndCashEquivalents { get; set; }

        /// <summary>
        /// Gets or Sets CashAndShortTermInvestments
        /// </summary>
        [DataMember(Name="cashAndShortTermInvestments", EmitDefaultValue=false)]
        public long? CashAndShortTermInvestments { get; set; }

        /// <summary>
        /// Gets or Sets Inventory
        /// </summary>
        [DataMember(Name="inventory", EmitDefaultValue=false)]
        public long? Inventory { get; set; }

        /// <summary>
        /// Gets or Sets CurrentNetReceivables
        /// </summary>
        [DataMember(Name="currentNetReceivables", EmitDefaultValue=false)]
        public long? CurrentNetReceivables { get; set; }

        /// <summary>
        /// Gets or Sets NonCurrentAssets
        /// </summary>
        [DataMember(Name="nonCurrentAssets", EmitDefaultValue=false)]
        public long? NonCurrentAssets { get; set; }

        /// <summary>
        /// Gets or Sets PropertyPlantEquipment
        /// </summary>
        [DataMember(Name="propertyPlantEquipment", EmitDefaultValue=false)]
        public long? PropertyPlantEquipment { get; set; }

        /// <summary>
        /// Gets or Sets AccumulatedDepreciationAmortization
        /// </summary>
        [DataMember(Name="accumulatedDepreciationAmortization", EmitDefaultValue=false)]
        public long? AccumulatedDepreciationAmortization { get; set; }

        /// <summary>
        /// Gets or Sets IntangibleAssets
        /// </summary>
        [DataMember(Name="intangibleAssets", EmitDefaultValue=false)]
        public long? IntangibleAssets { get; set; }

        /// <summary>
        /// Gets or Sets IntangibleAssetsExcludingGoodwill
        /// </summary>
        [DataMember(Name="intangibleAssetsExcludingGoodwill", EmitDefaultValue=false)]
        public long? IntangibleAssetsExcludingGoodwill { get; set; }

        /// <summary>
        /// Gets or Sets Goodwill
        /// </summary>
        [DataMember(Name="goodwill", EmitDefaultValue=false)]
        public long? Goodwill { get; set; }

        /// <summary>
        /// Gets or Sets Investments
        /// </summary>
        [DataMember(Name="investments", EmitDefaultValue=false)]
        public long? Investments { get; set; }

        /// <summary>
        /// Gets or Sets LongTermInvestments
        /// </summary>
        [DataMember(Name="longTermInvestments", EmitDefaultValue=false)]
        public long? LongTermInvestments { get; set; }

        /// <summary>
        /// Gets or Sets ShortTermInvestments
        /// </summary>
        [DataMember(Name="shortTermInvestments", EmitDefaultValue=false)]
        public long? ShortTermInvestments { get; set; }

        /// <summary>
        /// Gets or Sets OtherCurrentAssets
        /// </summary>
        [DataMember(Name="otherCurrentAssets", EmitDefaultValue=false)]
        public long? OtherCurrentAssets { get; set; }

        /// <summary>
        /// Gets or Sets OtherNonCurrentAssets
        /// </summary>
        [DataMember(Name="otherNonCurrentAssets", EmitDefaultValue=false)]
        public long? OtherNonCurrentAssets { get; set; }

        /// <summary>
        /// Gets or Sets Liabilities
        /// </summary>
        [DataMember(Name="liabilities", EmitDefaultValue=false)]
        public long? Liabilities { get; set; }

        /// <summary>
        /// Gets or Sets CurrentLiabilities
        /// </summary>
        [DataMember(Name="currentLiabilities", EmitDefaultValue=false)]
        public long? CurrentLiabilities { get; set; }

        /// <summary>
        /// Gets or Sets CurrentAccountsPayable
        /// </summary>
        [DataMember(Name="currentAccountsPayable", EmitDefaultValue=false)]
        public long? CurrentAccountsPayable { get; set; }

        /// <summary>
        /// Gets or Sets DeferredRevenue
        /// </summary>
        [DataMember(Name="deferredRevenue", EmitDefaultValue=false)]
        public long? DeferredRevenue { get; set; }

        /// <summary>
        /// Gets or Sets CurrentDebt
        /// </summary>
        [DataMember(Name="currentDebt", EmitDefaultValue=false)]
        public long? CurrentDebt { get; set; }

        /// <summary>
        /// Gets or Sets ShortTermDebt
        /// </summary>
        [DataMember(Name="shortTermDebt", EmitDefaultValue=false)]
        public long? ShortTermDebt { get; set; }

        /// <summary>
        /// Gets or Sets NonCurrentLiabilities
        /// </summary>
        [DataMember(Name="nonCurrentLiabilities", EmitDefaultValue=false)]
        public long? NonCurrentLiabilities { get; set; }

        /// <summary>
        /// Gets or Sets CapitalLeaseObligations
        /// </summary>
        [DataMember(Name="capitalLeaseObligations", EmitDefaultValue=false)]
        public long? CapitalLeaseObligations { get; set; }

        /// <summary>
        /// Gets or Sets LongTermDebt
        /// </summary>
        [DataMember(Name="longTermDebt", EmitDefaultValue=false)]
        public long? LongTermDebt { get; set; }

        /// <summary>
        /// Gets or Sets CurrentLongTermDebt
        /// </summary>
        [DataMember(Name="currentLongTermDebt", EmitDefaultValue=false)]
        public long? CurrentLongTermDebt { get; set; }

        /// <summary>
        /// Gets or Sets LongTermDebtNonCurrent
        /// </summary>
        [DataMember(Name="longTermDebtNonCurrent", EmitDefaultValue=false)]
        public long? LongTermDebtNonCurrent { get; set; }

        /// <summary>
        /// Gets or Sets ShortLongTermDebtTotal
        /// </summary>
        [DataMember(Name="shortLongTermDebtTotal", EmitDefaultValue=false)]
        public long? ShortLongTermDebtTotal { get; set; }

        /// <summary>
        /// Gets or Sets OtherCurrentLiabilities
        /// </summary>
        [DataMember(Name="otherCurrentLiabilities", EmitDefaultValue=false)]
        public long? OtherCurrentLiabilities { get; set; }

        /// <summary>
        /// Gets or Sets OtherNonCurrentLiabilities
        /// </summary>
        [DataMember(Name="otherNonCurrentLiabilities", EmitDefaultValue=false)]
        public long? OtherNonCurrentLiabilities { get; set; }

        /// <summary>
        /// Gets or Sets Equity
        /// </summary>
        [DataMember(Name="equity", EmitDefaultValue=false)]
        public long? Equity { get; set; }

        /// <summary>
        /// Gets or Sets TreasuryStock
        /// </summary>
        [DataMember(Name="treasuryStock", EmitDefaultValue=false)]
        public long? TreasuryStock { get; set; }

        /// <summary>
        /// Gets or Sets RetainedEarnings
        /// </summary>
        [DataMember(Name="retainedEarnings", EmitDefaultValue=false)]
        public long? RetainedEarnings { get; set; }

        /// <summary>
        /// Gets or Sets CommonStock
        /// </summary>
        [DataMember(Name="commonStock", EmitDefaultValue=false)]
        public long? CommonStock { get; set; }

        /// <summary>
        /// Gets or Sets SharesOutstanding
        /// </summary>
        [DataMember(Name="sharesOutstanding", EmitDefaultValue=false)]
        public long? SharesOutstanding { get; set; }

        /// <summary>
        /// Gets or Sets AccumulatedOtherComprehensiveIncome
        /// </summary>
        [DataMember(Name="accumulatedOtherComprehensiveIncome", EmitDefaultValue=false)]
        public long? AccumulatedOtherComprehensiveIncome { get; set; }

        /// <summary>
        /// Gets or Sets WorkingCapital
        /// </summary>
        [DataMember(Name="workingCapital", EmitDefaultValue=false)]
        public long? WorkingCapital { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BalanceSheet {\n");
            sb.Append("  Assets: ").Append(Assets).Append("\n");
            sb.Append("  TangibleAssets: ").Append(TangibleAssets).Append("\n");
            sb.Append("  CurrentAssets: ").Append(CurrentAssets).Append("\n");
            sb.Append("  CashAndCashEquivalents: ").Append(CashAndCashEquivalents).Append("\n");
            sb.Append("  CashAndShortTermInvestments: ").Append(CashAndShortTermInvestments).Append("\n");
            sb.Append("  Inventory: ").Append(Inventory).Append("\n");
            sb.Append("  CurrentNetReceivables: ").Append(CurrentNetReceivables).Append("\n");
            sb.Append("  NonCurrentAssets: ").Append(NonCurrentAssets).Append("\n");
            sb.Append("  PropertyPlantEquipment: ").Append(PropertyPlantEquipment).Append("\n");
            sb.Append("  AccumulatedDepreciationAmortization: ").Append(AccumulatedDepreciationAmortization).Append("\n");
            sb.Append("  IntangibleAssets: ").Append(IntangibleAssets).Append("\n");
            sb.Append("  IntangibleAssetsExcludingGoodwill: ").Append(IntangibleAssetsExcludingGoodwill).Append("\n");
            sb.Append("  Goodwill: ").Append(Goodwill).Append("\n");
            sb.Append("  Investments: ").Append(Investments).Append("\n");
            sb.Append("  LongTermInvestments: ").Append(LongTermInvestments).Append("\n");
            sb.Append("  ShortTermInvestments: ").Append(ShortTermInvestments).Append("\n");
            sb.Append("  OtherCurrentAssets: ").Append(OtherCurrentAssets).Append("\n");
            sb.Append("  OtherNonCurrentAssets: ").Append(OtherNonCurrentAssets).Append("\n");
            sb.Append("  Liabilities: ").Append(Liabilities).Append("\n");
            sb.Append("  CurrentLiabilities: ").Append(CurrentLiabilities).Append("\n");
            sb.Append("  CurrentAccountsPayable: ").Append(CurrentAccountsPayable).Append("\n");
            sb.Append("  DeferredRevenue: ").Append(DeferredRevenue).Append("\n");
            sb.Append("  CurrentDebt: ").Append(CurrentDebt).Append("\n");
            sb.Append("  ShortTermDebt: ").Append(ShortTermDebt).Append("\n");
            sb.Append("  NonCurrentLiabilities: ").Append(NonCurrentLiabilities).Append("\n");
            sb.Append("  CapitalLeaseObligations: ").Append(CapitalLeaseObligations).Append("\n");
            sb.Append("  LongTermDebt: ").Append(LongTermDebt).Append("\n");
            sb.Append("  CurrentLongTermDebt: ").Append(CurrentLongTermDebt).Append("\n");
            sb.Append("  LongTermDebtNonCurrent: ").Append(LongTermDebtNonCurrent).Append("\n");
            sb.Append("  ShortLongTermDebtTotal: ").Append(ShortLongTermDebtTotal).Append("\n");
            sb.Append("  OtherCurrentLiabilities: ").Append(OtherCurrentLiabilities).Append("\n");
            sb.Append("  OtherNonCurrentLiabilities: ").Append(OtherNonCurrentLiabilities).Append("\n");
            sb.Append("  Equity: ").Append(Equity).Append("\n");
            sb.Append("  TreasuryStock: ").Append(TreasuryStock).Append("\n");
            sb.Append("  RetainedEarnings: ").Append(RetainedEarnings).Append("\n");
            sb.Append("  CommonStock: ").Append(CommonStock).Append("\n");
            sb.Append("  SharesOutstanding: ").Append(SharesOutstanding).Append("\n");
            sb.Append("  AccumulatedOtherComprehensiveIncome: ").Append(AccumulatedOtherComprehensiveIncome).Append("\n");
            sb.Append("  WorkingCapital: ").Append(WorkingCapital).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BalanceSheet);
        }

        /// <summary>
        /// Returns true if BalanceSheet instances are equal
        /// </summary>
        /// <param name="input">Instance of BalanceSheet to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BalanceSheet input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Assets == input.Assets ||
                    (this.Assets != null &&
                    this.Assets.Equals(input.Assets))
                ) && 
                (
                    this.TangibleAssets == input.TangibleAssets ||
                    (this.TangibleAssets != null &&
                    this.TangibleAssets.Equals(input.TangibleAssets))
                ) && 
                (
                    this.CurrentAssets == input.CurrentAssets ||
                    (this.CurrentAssets != null &&
                    this.CurrentAssets.Equals(input.CurrentAssets))
                ) && 
                (
                    this.CashAndCashEquivalents == input.CashAndCashEquivalents ||
                    (this.CashAndCashEquivalents != null &&
                    this.CashAndCashEquivalents.Equals(input.CashAndCashEquivalents))
                ) && 
                (
                    this.CashAndShortTermInvestments == input.CashAndShortTermInvestments ||
                    (this.CashAndShortTermInvestments != null &&
                    this.CashAndShortTermInvestments.Equals(input.CashAndShortTermInvestments))
                ) && 
                (
                    this.Inventory == input.Inventory ||
                    (this.Inventory != null &&
                    this.Inventory.Equals(input.Inventory))
                ) && 
                (
                    this.CurrentNetReceivables == input.CurrentNetReceivables ||
                    (this.CurrentNetReceivables != null &&
                    this.CurrentNetReceivables.Equals(input.CurrentNetReceivables))
                ) && 
                (
                    this.NonCurrentAssets == input.NonCurrentAssets ||
                    (this.NonCurrentAssets != null &&
                    this.NonCurrentAssets.Equals(input.NonCurrentAssets))
                ) && 
                (
                    this.PropertyPlantEquipment == input.PropertyPlantEquipment ||
                    (this.PropertyPlantEquipment != null &&
                    this.PropertyPlantEquipment.Equals(input.PropertyPlantEquipment))
                ) && 
                (
                    this.AccumulatedDepreciationAmortization == input.AccumulatedDepreciationAmortization ||
                    (this.AccumulatedDepreciationAmortization != null &&
                    this.AccumulatedDepreciationAmortization.Equals(input.AccumulatedDepreciationAmortization))
                ) && 
                (
                    this.IntangibleAssets == input.IntangibleAssets ||
                    (this.IntangibleAssets != null &&
                    this.IntangibleAssets.Equals(input.IntangibleAssets))
                ) && 
                (
                    this.IntangibleAssetsExcludingGoodwill == input.IntangibleAssetsExcludingGoodwill ||
                    (this.IntangibleAssetsExcludingGoodwill != null &&
                    this.IntangibleAssetsExcludingGoodwill.Equals(input.IntangibleAssetsExcludingGoodwill))
                ) && 
                (
                    this.Goodwill == input.Goodwill ||
                    (this.Goodwill != null &&
                    this.Goodwill.Equals(input.Goodwill))
                ) && 
                (
                    this.Investments == input.Investments ||
                    (this.Investments != null &&
                    this.Investments.Equals(input.Investments))
                ) && 
                (
                    this.LongTermInvestments == input.LongTermInvestments ||
                    (this.LongTermInvestments != null &&
                    this.LongTermInvestments.Equals(input.LongTermInvestments))
                ) && 
                (
                    this.ShortTermInvestments == input.ShortTermInvestments ||
                    (this.ShortTermInvestments != null &&
                    this.ShortTermInvestments.Equals(input.ShortTermInvestments))
                ) && 
                (
                    this.OtherCurrentAssets == input.OtherCurrentAssets ||
                    (this.OtherCurrentAssets != null &&
                    this.OtherCurrentAssets.Equals(input.OtherCurrentAssets))
                ) && 
                (
                    this.OtherNonCurrentAssets == input.OtherNonCurrentAssets ||
                    (this.OtherNonCurrentAssets != null &&
                    this.OtherNonCurrentAssets.Equals(input.OtherNonCurrentAssets))
                ) && 
                (
                    this.Liabilities == input.Liabilities ||
                    (this.Liabilities != null &&
                    this.Liabilities.Equals(input.Liabilities))
                ) && 
                (
                    this.CurrentLiabilities == input.CurrentLiabilities ||
                    (this.CurrentLiabilities != null &&
                    this.CurrentLiabilities.Equals(input.CurrentLiabilities))
                ) && 
                (
                    this.CurrentAccountsPayable == input.CurrentAccountsPayable ||
                    (this.CurrentAccountsPayable != null &&
                    this.CurrentAccountsPayable.Equals(input.CurrentAccountsPayable))
                ) && 
                (
                    this.DeferredRevenue == input.DeferredRevenue ||
                    (this.DeferredRevenue != null &&
                    this.DeferredRevenue.Equals(input.DeferredRevenue))
                ) && 
                (
                    this.CurrentDebt == input.CurrentDebt ||
                    (this.CurrentDebt != null &&
                    this.CurrentDebt.Equals(input.CurrentDebt))
                ) && 
                (
                    this.ShortTermDebt == input.ShortTermDebt ||
                    (this.ShortTermDebt != null &&
                    this.ShortTermDebt.Equals(input.ShortTermDebt))
                ) && 
                (
                    this.NonCurrentLiabilities == input.NonCurrentLiabilities ||
                    (this.NonCurrentLiabilities != null &&
                    this.NonCurrentLiabilities.Equals(input.NonCurrentLiabilities))
                ) && 
                (
                    this.CapitalLeaseObligations == input.CapitalLeaseObligations ||
                    (this.CapitalLeaseObligations != null &&
                    this.CapitalLeaseObligations.Equals(input.CapitalLeaseObligations))
                ) && 
                (
                    this.LongTermDebt == input.LongTermDebt ||
                    (this.LongTermDebt != null &&
                    this.LongTermDebt.Equals(input.LongTermDebt))
                ) && 
                (
                    this.CurrentLongTermDebt == input.CurrentLongTermDebt ||
                    (this.CurrentLongTermDebt != null &&
                    this.CurrentLongTermDebt.Equals(input.CurrentLongTermDebt))
                ) && 
                (
                    this.LongTermDebtNonCurrent == input.LongTermDebtNonCurrent ||
                    (this.LongTermDebtNonCurrent != null &&
                    this.LongTermDebtNonCurrent.Equals(input.LongTermDebtNonCurrent))
                ) && 
                (
                    this.ShortLongTermDebtTotal == input.ShortLongTermDebtTotal ||
                    (this.ShortLongTermDebtTotal != null &&
                    this.ShortLongTermDebtTotal.Equals(input.ShortLongTermDebtTotal))
                ) && 
                (
                    this.OtherCurrentLiabilities == input.OtherCurrentLiabilities ||
                    (this.OtherCurrentLiabilities != null &&
                    this.OtherCurrentLiabilities.Equals(input.OtherCurrentLiabilities))
                ) && 
                (
                    this.OtherNonCurrentLiabilities == input.OtherNonCurrentLiabilities ||
                    (this.OtherNonCurrentLiabilities != null &&
                    this.OtherNonCurrentLiabilities.Equals(input.OtherNonCurrentLiabilities))
                ) && 
                (
                    this.Equity == input.Equity ||
                    (this.Equity != null &&
                    this.Equity.Equals(input.Equity))
                ) && 
                (
                    this.TreasuryStock == input.TreasuryStock ||
                    (this.TreasuryStock != null &&
                    this.TreasuryStock.Equals(input.TreasuryStock))
                ) && 
                (
                    this.RetainedEarnings == input.RetainedEarnings ||
                    (this.RetainedEarnings != null &&
                    this.RetainedEarnings.Equals(input.RetainedEarnings))
                ) && 
                (
                    this.CommonStock == input.CommonStock ||
                    (this.CommonStock != null &&
                    this.CommonStock.Equals(input.CommonStock))
                ) && 
                (
                    this.SharesOutstanding == input.SharesOutstanding ||
                    (this.SharesOutstanding != null &&
                    this.SharesOutstanding.Equals(input.SharesOutstanding))
                ) && 
                (
                    this.AccumulatedOtherComprehensiveIncome == input.AccumulatedOtherComprehensiveIncome ||
                    (this.AccumulatedOtherComprehensiveIncome != null &&
                    this.AccumulatedOtherComprehensiveIncome.Equals(input.AccumulatedOtherComprehensiveIncome))
                ) && 
                (
                    this.WorkingCapital == input.WorkingCapital ||
                    (this.WorkingCapital != null &&
                    this.WorkingCapital.Equals(input.WorkingCapital))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Assets != null)
                    hashCode = hashCode * 59 + this.Assets.GetHashCode();
                if (this.TangibleAssets != null)
                    hashCode = hashCode * 59 + this.TangibleAssets.GetHashCode();
                if (this.CurrentAssets != null)
                    hashCode = hashCode * 59 + this.CurrentAssets.GetHashCode();
                if (this.CashAndCashEquivalents != null)
                    hashCode = hashCode * 59 + this.CashAndCashEquivalents.GetHashCode();
                if (this.CashAndShortTermInvestments != null)
                    hashCode = hashCode * 59 + this.CashAndShortTermInvestments.GetHashCode();
                if (this.Inventory != null)
                    hashCode = hashCode * 59 + this.Inventory.GetHashCode();
                if (this.CurrentNetReceivables != null)
                    hashCode = hashCode * 59 + this.CurrentNetReceivables.GetHashCode();
                if (this.NonCurrentAssets != null)
                    hashCode = hashCode * 59 + this.NonCurrentAssets.GetHashCode();
                if (this.PropertyPlantEquipment != null)
                    hashCode = hashCode * 59 + this.PropertyPlantEquipment.GetHashCode();
                if (this.AccumulatedDepreciationAmortization != null)
                    hashCode = hashCode * 59 + this.AccumulatedDepreciationAmortization.GetHashCode();
                if (this.IntangibleAssets != null)
                    hashCode = hashCode * 59 + this.IntangibleAssets.GetHashCode();
                if (this.IntangibleAssetsExcludingGoodwill != null)
                    hashCode = hashCode * 59 + this.IntangibleAssetsExcludingGoodwill.GetHashCode();
                if (this.Goodwill != null)
                    hashCode = hashCode * 59 + this.Goodwill.GetHashCode();
                if (this.Investments != null)
                    hashCode = hashCode * 59 + this.Investments.GetHashCode();
                if (this.LongTermInvestments != null)
                    hashCode = hashCode * 59 + this.LongTermInvestments.GetHashCode();
                if (this.ShortTermInvestments != null)
                    hashCode = hashCode * 59 + this.ShortTermInvestments.GetHashCode();
                if (this.OtherCurrentAssets != null)
                    hashCode = hashCode * 59 + this.OtherCurrentAssets.GetHashCode();
                if (this.OtherNonCurrentAssets != null)
                    hashCode = hashCode * 59 + this.OtherNonCurrentAssets.GetHashCode();
                if (this.Liabilities != null)
                    hashCode = hashCode * 59 + this.Liabilities.GetHashCode();
                if (this.CurrentLiabilities != null)
                    hashCode = hashCode * 59 + this.CurrentLiabilities.GetHashCode();
                if (this.CurrentAccountsPayable != null)
                    hashCode = hashCode * 59 + this.CurrentAccountsPayable.GetHashCode();
                if (this.DeferredRevenue != null)
                    hashCode = hashCode * 59 + this.DeferredRevenue.GetHashCode();
                if (this.CurrentDebt != null)
                    hashCode = hashCode * 59 + this.CurrentDebt.GetHashCode();
                if (this.ShortTermDebt != null)
                    hashCode = hashCode * 59 + this.ShortTermDebt.GetHashCode();
                if (this.NonCurrentLiabilities != null)
                    hashCode = hashCode * 59 + this.NonCurrentLiabilities.GetHashCode();
                if (this.CapitalLeaseObligations != null)
                    hashCode = hashCode * 59 + this.CapitalLeaseObligations.GetHashCode();
                if (this.LongTermDebt != null)
                    hashCode = hashCode * 59 + this.LongTermDebt.GetHashCode();
                if (this.CurrentLongTermDebt != null)
                    hashCode = hashCode * 59 + this.CurrentLongTermDebt.GetHashCode();
                if (this.LongTermDebtNonCurrent != null)
                    hashCode = hashCode * 59 + this.LongTermDebtNonCurrent.GetHashCode();
                if (this.ShortLongTermDebtTotal != null)
                    hashCode = hashCode * 59 + this.ShortLongTermDebtTotal.GetHashCode();
                if (this.OtherCurrentLiabilities != null)
                    hashCode = hashCode * 59 + this.OtherCurrentLiabilities.GetHashCode();
                if (this.OtherNonCurrentLiabilities != null)
                    hashCode = hashCode * 59 + this.OtherNonCurrentLiabilities.GetHashCode();
                if (this.Equity != null)
                    hashCode = hashCode * 59 + this.Equity.GetHashCode();
                if (this.TreasuryStock != null)
                    hashCode = hashCode * 59 + this.TreasuryStock.GetHashCode();
                if (this.RetainedEarnings != null)
                    hashCode = hashCode * 59 + this.RetainedEarnings.GetHashCode();
                if (this.CommonStock != null)
                    hashCode = hashCode * 59 + this.CommonStock.GetHashCode();
                if (this.SharesOutstanding != null)
                    hashCode = hashCode * 59 + this.SharesOutstanding.GetHashCode();
                if (this.AccumulatedOtherComprehensiveIncome != null)
                    hashCode = hashCode * 59 + this.AccumulatedOtherComprehensiveIncome.GetHashCode();
                if (this.WorkingCapital != null)
                    hashCode = hashCode * 59 + this.WorkingCapital.GetHashCode();
                return hashCode;
            }
        }
    }
}
