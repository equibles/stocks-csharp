/* 
 * Stocks
 *
 * <h3>Rate limits</h3>                     Free subscriptions are subject to daily limits. To know how much requests you have left look at the following headers in the response.<br />                     1. <strong>x-ratelimit-limit</strong> - The total number of requests that you are allowed to make in a given period (hour/day)<br />                     2. <strong>x-ratelimit-remaining</strong> - The number of remaining requests that you can perform in the current period.<br />                     3. <strong>x-ratelimit-reset</strong> - The number of seconds until the current period resets.<br />                     <br />                     <br />                     You don't have an API key? <a href=\"https://www.equibles.com/api/pricing\" target=\"_blank\">Get one for free here.</a>
 *
 * OpenAPI spec version: v1
 * Contact: contact@equibles.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Equibles.Stocks.Client.SwaggerDateConverter;

namespace Equibles.Stocks.Model
{
    /// <summary>
    /// CashFlowStatement
    /// </summary>
    [DataContract]
        public partial class CashFlowStatement :  IEquatable<CashFlowStatement>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CashFlowStatement" /> class.
        /// </summary>
        /// <param name="operatingCashFlow">operatingCashFlow.</param>
        /// <param name="paymentsForOperatingActivities">paymentsForOperatingActivities.</param>
        /// <param name="proceedsFromOperatingActivities">proceedsFromOperatingActivities.</param>
        /// <param name="changeInOperatingLiabilities">changeInOperatingLiabilities.</param>
        /// <param name="changeInOperatingAssets">changeInOperatingAssets.</param>
        /// <param name="depreciationDepletionAndAmortization">depreciationDepletionAndAmortization.</param>
        /// <param name="capitalExpenditures">capitalExpenditures.</param>
        /// <param name="changeInReceivables">changeInReceivables.</param>
        /// <param name="changeInInventory">changeInInventory.</param>
        /// <param name="profitLoss">profitLoss.</param>
        /// <param name="investments">investments.</param>
        /// <param name="cashFlowFromInvestment">cashFlowFromInvestment.</param>
        /// <param name="cashFlowFromFinancing">cashFlowFromFinancing.</param>
        /// <param name="proceedsFromRepaymentsOfShortTermDebt">proceedsFromRepaymentsOfShortTermDebt.</param>
        /// <param name="paymentsForRepurchaseOfCommonStock">paymentsForRepurchaseOfCommonStock.</param>
        /// <param name="paymentsForRepurchaseOfEquity">paymentsForRepurchaseOfEquity.</param>
        /// <param name="paymentsForRepurchaseOfPreferredStock">paymentsForRepurchaseOfPreferredStock.</param>
        /// <param name="dividendPayout">dividendPayout.</param>
        /// <param name="dividendPayoutCommonStock">dividendPayoutCommonStock.</param>
        /// <param name="dividendPayoutPreferredStock">dividendPayoutPreferredStock.</param>
        /// <param name="proceedsFromIssuanceOfCommonStock">proceedsFromIssuanceOfCommonStock.</param>
        /// <param name="proceedsFromIssuanceOfLongTermDebtAndCapitalSecuritiesNet">proceedsFromIssuanceOfLongTermDebtAndCapitalSecuritiesNet.</param>
        /// <param name="proceedsFromIssuanceOfPreferredStock">proceedsFromIssuanceOfPreferredStock.</param>
        /// <param name="proceedsFromRepurchaseOfEquity">proceedsFromRepurchaseOfEquity.</param>
        /// <param name="proceedsFromSaleOfTreasuryStock">proceedsFromSaleOfTreasuryStock.</param>
        /// <param name="changeInCashAndCashEquivalents">changeInCashAndCashEquivalents.</param>
        /// <param name="changeInExchangeRate">changeInExchangeRate.</param>
        /// <param name="netIncome">netIncome.</param>
        /// <param name="netBorrowings">netBorrowings.</param>
        /// <param name="changeInWorkingCapital">changeInWorkingCapital.</param>
        /// <param name="otherNonCashItems">otherNonCashItems.</param>
        /// <param name="freeCashFlow">freeCashFlow.</param>
        public CashFlowStatement(long? operatingCashFlow = default(long?), long? paymentsForOperatingActivities = default(long?), long? proceedsFromOperatingActivities = default(long?), long? changeInOperatingLiabilities = default(long?), long? changeInOperatingAssets = default(long?), long? depreciationDepletionAndAmortization = default(long?), long? capitalExpenditures = default(long?), long? changeInReceivables = default(long?), long? changeInInventory = default(long?), long? profitLoss = default(long?), long? investments = default(long?), long? cashFlowFromInvestment = default(long?), long? cashFlowFromFinancing = default(long?), long? proceedsFromRepaymentsOfShortTermDebt = default(long?), long? paymentsForRepurchaseOfCommonStock = default(long?), long? paymentsForRepurchaseOfEquity = default(long?), long? paymentsForRepurchaseOfPreferredStock = default(long?), long? dividendPayout = default(long?), long? dividendPayoutCommonStock = default(long?), long? dividendPayoutPreferredStock = default(long?), long? proceedsFromIssuanceOfCommonStock = default(long?), long? proceedsFromIssuanceOfLongTermDebtAndCapitalSecuritiesNet = default(long?), long? proceedsFromIssuanceOfPreferredStock = default(long?), long? proceedsFromRepurchaseOfEquity = default(long?), long? proceedsFromSaleOfTreasuryStock = default(long?), long? changeInCashAndCashEquivalents = default(long?), long? changeInExchangeRate = default(long?), long? netIncome = default(long?), long? netBorrowings = default(long?), long? changeInWorkingCapital = default(long?), long? otherNonCashItems = default(long?), long? freeCashFlow = default(long?))
        {
            this.OperatingCashFlow = operatingCashFlow;
            this.PaymentsForOperatingActivities = paymentsForOperatingActivities;
            this.ProceedsFromOperatingActivities = proceedsFromOperatingActivities;
            this.ChangeInOperatingLiabilities = changeInOperatingLiabilities;
            this.ChangeInOperatingAssets = changeInOperatingAssets;
            this.DepreciationDepletionAndAmortization = depreciationDepletionAndAmortization;
            this.CapitalExpenditures = capitalExpenditures;
            this.ChangeInReceivables = changeInReceivables;
            this.ChangeInInventory = changeInInventory;
            this.ProfitLoss = profitLoss;
            this.Investments = investments;
            this.CashFlowFromInvestment = cashFlowFromInvestment;
            this.CashFlowFromFinancing = cashFlowFromFinancing;
            this.ProceedsFromRepaymentsOfShortTermDebt = proceedsFromRepaymentsOfShortTermDebt;
            this.PaymentsForRepurchaseOfCommonStock = paymentsForRepurchaseOfCommonStock;
            this.PaymentsForRepurchaseOfEquity = paymentsForRepurchaseOfEquity;
            this.PaymentsForRepurchaseOfPreferredStock = paymentsForRepurchaseOfPreferredStock;
            this.DividendPayout = dividendPayout;
            this.DividendPayoutCommonStock = dividendPayoutCommonStock;
            this.DividendPayoutPreferredStock = dividendPayoutPreferredStock;
            this.ProceedsFromIssuanceOfCommonStock = proceedsFromIssuanceOfCommonStock;
            this.ProceedsFromIssuanceOfLongTermDebtAndCapitalSecuritiesNet = proceedsFromIssuanceOfLongTermDebtAndCapitalSecuritiesNet;
            this.ProceedsFromIssuanceOfPreferredStock = proceedsFromIssuanceOfPreferredStock;
            this.ProceedsFromRepurchaseOfEquity = proceedsFromRepurchaseOfEquity;
            this.ProceedsFromSaleOfTreasuryStock = proceedsFromSaleOfTreasuryStock;
            this.ChangeInCashAndCashEquivalents = changeInCashAndCashEquivalents;
            this.ChangeInExchangeRate = changeInExchangeRate;
            this.NetIncome = netIncome;
            this.NetBorrowings = netBorrowings;
            this.ChangeInWorkingCapital = changeInWorkingCapital;
            this.OtherNonCashItems = otherNonCashItems;
            this.FreeCashFlow = freeCashFlow;
        }
        
        /// <summary>
        /// Gets or Sets OperatingCashFlow
        /// </summary>
        [DataMember(Name="operatingCashFlow", EmitDefaultValue=false)]
        public long? OperatingCashFlow { get; set; }

        /// <summary>
        /// Gets or Sets PaymentsForOperatingActivities
        /// </summary>
        [DataMember(Name="paymentsForOperatingActivities", EmitDefaultValue=false)]
        public long? PaymentsForOperatingActivities { get; set; }

        /// <summary>
        /// Gets or Sets ProceedsFromOperatingActivities
        /// </summary>
        [DataMember(Name="proceedsFromOperatingActivities", EmitDefaultValue=false)]
        public long? ProceedsFromOperatingActivities { get; set; }

        /// <summary>
        /// Gets or Sets ChangeInOperatingLiabilities
        /// </summary>
        [DataMember(Name="changeInOperatingLiabilities", EmitDefaultValue=false)]
        public long? ChangeInOperatingLiabilities { get; set; }

        /// <summary>
        /// Gets or Sets ChangeInOperatingAssets
        /// </summary>
        [DataMember(Name="changeInOperatingAssets", EmitDefaultValue=false)]
        public long? ChangeInOperatingAssets { get; set; }

        /// <summary>
        /// Gets or Sets DepreciationDepletionAndAmortization
        /// </summary>
        [DataMember(Name="depreciationDepletionAndAmortization", EmitDefaultValue=false)]
        public long? DepreciationDepletionAndAmortization { get; set; }

        /// <summary>
        /// Gets or Sets CapitalExpenditures
        /// </summary>
        [DataMember(Name="capitalExpenditures", EmitDefaultValue=false)]
        public long? CapitalExpenditures { get; set; }

        /// <summary>
        /// Gets or Sets ChangeInReceivables
        /// </summary>
        [DataMember(Name="changeInReceivables", EmitDefaultValue=false)]
        public long? ChangeInReceivables { get; set; }

        /// <summary>
        /// Gets or Sets ChangeInInventory
        /// </summary>
        [DataMember(Name="changeInInventory", EmitDefaultValue=false)]
        public long? ChangeInInventory { get; set; }

        /// <summary>
        /// Gets or Sets ProfitLoss
        /// </summary>
        [DataMember(Name="profitLoss", EmitDefaultValue=false)]
        public long? ProfitLoss { get; set; }

        /// <summary>
        /// Gets or Sets Investments
        /// </summary>
        [DataMember(Name="investments", EmitDefaultValue=false)]
        public long? Investments { get; set; }

        /// <summary>
        /// Gets or Sets CashFlowFromInvestment
        /// </summary>
        [DataMember(Name="cashFlowFromInvestment", EmitDefaultValue=false)]
        public long? CashFlowFromInvestment { get; set; }

        /// <summary>
        /// Gets or Sets CashFlowFromFinancing
        /// </summary>
        [DataMember(Name="cashFlowFromFinancing", EmitDefaultValue=false)]
        public long? CashFlowFromFinancing { get; set; }

        /// <summary>
        /// Gets or Sets ProceedsFromRepaymentsOfShortTermDebt
        /// </summary>
        [DataMember(Name="proceedsFromRepaymentsOfShortTermDebt", EmitDefaultValue=false)]
        public long? ProceedsFromRepaymentsOfShortTermDebt { get; set; }

        /// <summary>
        /// Gets or Sets PaymentsForRepurchaseOfCommonStock
        /// </summary>
        [DataMember(Name="paymentsForRepurchaseOfCommonStock", EmitDefaultValue=false)]
        public long? PaymentsForRepurchaseOfCommonStock { get; set; }

        /// <summary>
        /// Gets or Sets PaymentsForRepurchaseOfEquity
        /// </summary>
        [DataMember(Name="paymentsForRepurchaseOfEquity", EmitDefaultValue=false)]
        public long? PaymentsForRepurchaseOfEquity { get; set; }

        /// <summary>
        /// Gets or Sets PaymentsForRepurchaseOfPreferredStock
        /// </summary>
        [DataMember(Name="paymentsForRepurchaseOfPreferredStock", EmitDefaultValue=false)]
        public long? PaymentsForRepurchaseOfPreferredStock { get; set; }

        /// <summary>
        /// Gets or Sets DividendPayout
        /// </summary>
        [DataMember(Name="dividendPayout", EmitDefaultValue=false)]
        public long? DividendPayout { get; set; }

        /// <summary>
        /// Gets or Sets DividendPayoutCommonStock
        /// </summary>
        [DataMember(Name="dividendPayoutCommonStock", EmitDefaultValue=false)]
        public long? DividendPayoutCommonStock { get; set; }

        /// <summary>
        /// Gets or Sets DividendPayoutPreferredStock
        /// </summary>
        [DataMember(Name="dividendPayoutPreferredStock", EmitDefaultValue=false)]
        public long? DividendPayoutPreferredStock { get; set; }

        /// <summary>
        /// Gets or Sets ProceedsFromIssuanceOfCommonStock
        /// </summary>
        [DataMember(Name="proceedsFromIssuanceOfCommonStock", EmitDefaultValue=false)]
        public long? ProceedsFromIssuanceOfCommonStock { get; set; }

        /// <summary>
        /// Gets or Sets ProceedsFromIssuanceOfLongTermDebtAndCapitalSecuritiesNet
        /// </summary>
        [DataMember(Name="proceedsFromIssuanceOfLongTermDebtAndCapitalSecuritiesNet", EmitDefaultValue=false)]
        public long? ProceedsFromIssuanceOfLongTermDebtAndCapitalSecuritiesNet { get; set; }

        /// <summary>
        /// Gets or Sets ProceedsFromIssuanceOfPreferredStock
        /// </summary>
        [DataMember(Name="proceedsFromIssuanceOfPreferredStock", EmitDefaultValue=false)]
        public long? ProceedsFromIssuanceOfPreferredStock { get; set; }

        /// <summary>
        /// Gets or Sets ProceedsFromRepurchaseOfEquity
        /// </summary>
        [DataMember(Name="proceedsFromRepurchaseOfEquity", EmitDefaultValue=false)]
        public long? ProceedsFromRepurchaseOfEquity { get; set; }

        /// <summary>
        /// Gets or Sets ProceedsFromSaleOfTreasuryStock
        /// </summary>
        [DataMember(Name="proceedsFromSaleOfTreasuryStock", EmitDefaultValue=false)]
        public long? ProceedsFromSaleOfTreasuryStock { get; set; }

        /// <summary>
        /// Gets or Sets ChangeInCashAndCashEquivalents
        /// </summary>
        [DataMember(Name="changeInCashAndCashEquivalents", EmitDefaultValue=false)]
        public long? ChangeInCashAndCashEquivalents { get; set; }

        /// <summary>
        /// Gets or Sets ChangeInExchangeRate
        /// </summary>
        [DataMember(Name="changeInExchangeRate", EmitDefaultValue=false)]
        public long? ChangeInExchangeRate { get; set; }

        /// <summary>
        /// Gets or Sets NetIncome
        /// </summary>
        [DataMember(Name="netIncome", EmitDefaultValue=false)]
        public long? NetIncome { get; set; }

        /// <summary>
        /// Gets or Sets NetBorrowings
        /// </summary>
        [DataMember(Name="netBorrowings", EmitDefaultValue=false)]
        public long? NetBorrowings { get; set; }

        /// <summary>
        /// Gets or Sets ChangeInWorkingCapital
        /// </summary>
        [DataMember(Name="changeInWorkingCapital", EmitDefaultValue=false)]
        public long? ChangeInWorkingCapital { get; set; }

        /// <summary>
        /// Gets or Sets OtherNonCashItems
        /// </summary>
        [DataMember(Name="otherNonCashItems", EmitDefaultValue=false)]
        public long? OtherNonCashItems { get; set; }

        /// <summary>
        /// Gets or Sets FreeCashFlow
        /// </summary>
        [DataMember(Name="freeCashFlow", EmitDefaultValue=false)]
        public long? FreeCashFlow { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CashFlowStatement {\n");
            sb.Append("  OperatingCashFlow: ").Append(OperatingCashFlow).Append("\n");
            sb.Append("  PaymentsForOperatingActivities: ").Append(PaymentsForOperatingActivities).Append("\n");
            sb.Append("  ProceedsFromOperatingActivities: ").Append(ProceedsFromOperatingActivities).Append("\n");
            sb.Append("  ChangeInOperatingLiabilities: ").Append(ChangeInOperatingLiabilities).Append("\n");
            sb.Append("  ChangeInOperatingAssets: ").Append(ChangeInOperatingAssets).Append("\n");
            sb.Append("  DepreciationDepletionAndAmortization: ").Append(DepreciationDepletionAndAmortization).Append("\n");
            sb.Append("  CapitalExpenditures: ").Append(CapitalExpenditures).Append("\n");
            sb.Append("  ChangeInReceivables: ").Append(ChangeInReceivables).Append("\n");
            sb.Append("  ChangeInInventory: ").Append(ChangeInInventory).Append("\n");
            sb.Append("  ProfitLoss: ").Append(ProfitLoss).Append("\n");
            sb.Append("  Investments: ").Append(Investments).Append("\n");
            sb.Append("  CashFlowFromInvestment: ").Append(CashFlowFromInvestment).Append("\n");
            sb.Append("  CashFlowFromFinancing: ").Append(CashFlowFromFinancing).Append("\n");
            sb.Append("  ProceedsFromRepaymentsOfShortTermDebt: ").Append(ProceedsFromRepaymentsOfShortTermDebt).Append("\n");
            sb.Append("  PaymentsForRepurchaseOfCommonStock: ").Append(PaymentsForRepurchaseOfCommonStock).Append("\n");
            sb.Append("  PaymentsForRepurchaseOfEquity: ").Append(PaymentsForRepurchaseOfEquity).Append("\n");
            sb.Append("  PaymentsForRepurchaseOfPreferredStock: ").Append(PaymentsForRepurchaseOfPreferredStock).Append("\n");
            sb.Append("  DividendPayout: ").Append(DividendPayout).Append("\n");
            sb.Append("  DividendPayoutCommonStock: ").Append(DividendPayoutCommonStock).Append("\n");
            sb.Append("  DividendPayoutPreferredStock: ").Append(DividendPayoutPreferredStock).Append("\n");
            sb.Append("  ProceedsFromIssuanceOfCommonStock: ").Append(ProceedsFromIssuanceOfCommonStock).Append("\n");
            sb.Append("  ProceedsFromIssuanceOfLongTermDebtAndCapitalSecuritiesNet: ").Append(ProceedsFromIssuanceOfLongTermDebtAndCapitalSecuritiesNet).Append("\n");
            sb.Append("  ProceedsFromIssuanceOfPreferredStock: ").Append(ProceedsFromIssuanceOfPreferredStock).Append("\n");
            sb.Append("  ProceedsFromRepurchaseOfEquity: ").Append(ProceedsFromRepurchaseOfEquity).Append("\n");
            sb.Append("  ProceedsFromSaleOfTreasuryStock: ").Append(ProceedsFromSaleOfTreasuryStock).Append("\n");
            sb.Append("  ChangeInCashAndCashEquivalents: ").Append(ChangeInCashAndCashEquivalents).Append("\n");
            sb.Append("  ChangeInExchangeRate: ").Append(ChangeInExchangeRate).Append("\n");
            sb.Append("  NetIncome: ").Append(NetIncome).Append("\n");
            sb.Append("  NetBorrowings: ").Append(NetBorrowings).Append("\n");
            sb.Append("  ChangeInWorkingCapital: ").Append(ChangeInWorkingCapital).Append("\n");
            sb.Append("  OtherNonCashItems: ").Append(OtherNonCashItems).Append("\n");
            sb.Append("  FreeCashFlow: ").Append(FreeCashFlow).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CashFlowStatement);
        }

        /// <summary>
        /// Returns true if CashFlowStatement instances are equal
        /// </summary>
        /// <param name="input">Instance of CashFlowStatement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CashFlowStatement input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OperatingCashFlow == input.OperatingCashFlow ||
                    (this.OperatingCashFlow != null &&
                    this.OperatingCashFlow.Equals(input.OperatingCashFlow))
                ) && 
                (
                    this.PaymentsForOperatingActivities == input.PaymentsForOperatingActivities ||
                    (this.PaymentsForOperatingActivities != null &&
                    this.PaymentsForOperatingActivities.Equals(input.PaymentsForOperatingActivities))
                ) && 
                (
                    this.ProceedsFromOperatingActivities == input.ProceedsFromOperatingActivities ||
                    (this.ProceedsFromOperatingActivities != null &&
                    this.ProceedsFromOperatingActivities.Equals(input.ProceedsFromOperatingActivities))
                ) && 
                (
                    this.ChangeInOperatingLiabilities == input.ChangeInOperatingLiabilities ||
                    (this.ChangeInOperatingLiabilities != null &&
                    this.ChangeInOperatingLiabilities.Equals(input.ChangeInOperatingLiabilities))
                ) && 
                (
                    this.ChangeInOperatingAssets == input.ChangeInOperatingAssets ||
                    (this.ChangeInOperatingAssets != null &&
                    this.ChangeInOperatingAssets.Equals(input.ChangeInOperatingAssets))
                ) && 
                (
                    this.DepreciationDepletionAndAmortization == input.DepreciationDepletionAndAmortization ||
                    (this.DepreciationDepletionAndAmortization != null &&
                    this.DepreciationDepletionAndAmortization.Equals(input.DepreciationDepletionAndAmortization))
                ) && 
                (
                    this.CapitalExpenditures == input.CapitalExpenditures ||
                    (this.CapitalExpenditures != null &&
                    this.CapitalExpenditures.Equals(input.CapitalExpenditures))
                ) && 
                (
                    this.ChangeInReceivables == input.ChangeInReceivables ||
                    (this.ChangeInReceivables != null &&
                    this.ChangeInReceivables.Equals(input.ChangeInReceivables))
                ) && 
                (
                    this.ChangeInInventory == input.ChangeInInventory ||
                    (this.ChangeInInventory != null &&
                    this.ChangeInInventory.Equals(input.ChangeInInventory))
                ) && 
                (
                    this.ProfitLoss == input.ProfitLoss ||
                    (this.ProfitLoss != null &&
                    this.ProfitLoss.Equals(input.ProfitLoss))
                ) && 
                (
                    this.Investments == input.Investments ||
                    (this.Investments != null &&
                    this.Investments.Equals(input.Investments))
                ) && 
                (
                    this.CashFlowFromInvestment == input.CashFlowFromInvestment ||
                    (this.CashFlowFromInvestment != null &&
                    this.CashFlowFromInvestment.Equals(input.CashFlowFromInvestment))
                ) && 
                (
                    this.CashFlowFromFinancing == input.CashFlowFromFinancing ||
                    (this.CashFlowFromFinancing != null &&
                    this.CashFlowFromFinancing.Equals(input.CashFlowFromFinancing))
                ) && 
                (
                    this.ProceedsFromRepaymentsOfShortTermDebt == input.ProceedsFromRepaymentsOfShortTermDebt ||
                    (this.ProceedsFromRepaymentsOfShortTermDebt != null &&
                    this.ProceedsFromRepaymentsOfShortTermDebt.Equals(input.ProceedsFromRepaymentsOfShortTermDebt))
                ) && 
                (
                    this.PaymentsForRepurchaseOfCommonStock == input.PaymentsForRepurchaseOfCommonStock ||
                    (this.PaymentsForRepurchaseOfCommonStock != null &&
                    this.PaymentsForRepurchaseOfCommonStock.Equals(input.PaymentsForRepurchaseOfCommonStock))
                ) && 
                (
                    this.PaymentsForRepurchaseOfEquity == input.PaymentsForRepurchaseOfEquity ||
                    (this.PaymentsForRepurchaseOfEquity != null &&
                    this.PaymentsForRepurchaseOfEquity.Equals(input.PaymentsForRepurchaseOfEquity))
                ) && 
                (
                    this.PaymentsForRepurchaseOfPreferredStock == input.PaymentsForRepurchaseOfPreferredStock ||
                    (this.PaymentsForRepurchaseOfPreferredStock != null &&
                    this.PaymentsForRepurchaseOfPreferredStock.Equals(input.PaymentsForRepurchaseOfPreferredStock))
                ) && 
                (
                    this.DividendPayout == input.DividendPayout ||
                    (this.DividendPayout != null &&
                    this.DividendPayout.Equals(input.DividendPayout))
                ) && 
                (
                    this.DividendPayoutCommonStock == input.DividendPayoutCommonStock ||
                    (this.DividendPayoutCommonStock != null &&
                    this.DividendPayoutCommonStock.Equals(input.DividendPayoutCommonStock))
                ) && 
                (
                    this.DividendPayoutPreferredStock == input.DividendPayoutPreferredStock ||
                    (this.DividendPayoutPreferredStock != null &&
                    this.DividendPayoutPreferredStock.Equals(input.DividendPayoutPreferredStock))
                ) && 
                (
                    this.ProceedsFromIssuanceOfCommonStock == input.ProceedsFromIssuanceOfCommonStock ||
                    (this.ProceedsFromIssuanceOfCommonStock != null &&
                    this.ProceedsFromIssuanceOfCommonStock.Equals(input.ProceedsFromIssuanceOfCommonStock))
                ) && 
                (
                    this.ProceedsFromIssuanceOfLongTermDebtAndCapitalSecuritiesNet == input.ProceedsFromIssuanceOfLongTermDebtAndCapitalSecuritiesNet ||
                    (this.ProceedsFromIssuanceOfLongTermDebtAndCapitalSecuritiesNet != null &&
                    this.ProceedsFromIssuanceOfLongTermDebtAndCapitalSecuritiesNet.Equals(input.ProceedsFromIssuanceOfLongTermDebtAndCapitalSecuritiesNet))
                ) && 
                (
                    this.ProceedsFromIssuanceOfPreferredStock == input.ProceedsFromIssuanceOfPreferredStock ||
                    (this.ProceedsFromIssuanceOfPreferredStock != null &&
                    this.ProceedsFromIssuanceOfPreferredStock.Equals(input.ProceedsFromIssuanceOfPreferredStock))
                ) && 
                (
                    this.ProceedsFromRepurchaseOfEquity == input.ProceedsFromRepurchaseOfEquity ||
                    (this.ProceedsFromRepurchaseOfEquity != null &&
                    this.ProceedsFromRepurchaseOfEquity.Equals(input.ProceedsFromRepurchaseOfEquity))
                ) && 
                (
                    this.ProceedsFromSaleOfTreasuryStock == input.ProceedsFromSaleOfTreasuryStock ||
                    (this.ProceedsFromSaleOfTreasuryStock != null &&
                    this.ProceedsFromSaleOfTreasuryStock.Equals(input.ProceedsFromSaleOfTreasuryStock))
                ) && 
                (
                    this.ChangeInCashAndCashEquivalents == input.ChangeInCashAndCashEquivalents ||
                    (this.ChangeInCashAndCashEquivalents != null &&
                    this.ChangeInCashAndCashEquivalents.Equals(input.ChangeInCashAndCashEquivalents))
                ) && 
                (
                    this.ChangeInExchangeRate == input.ChangeInExchangeRate ||
                    (this.ChangeInExchangeRate != null &&
                    this.ChangeInExchangeRate.Equals(input.ChangeInExchangeRate))
                ) && 
                (
                    this.NetIncome == input.NetIncome ||
                    (this.NetIncome != null &&
                    this.NetIncome.Equals(input.NetIncome))
                ) && 
                (
                    this.NetBorrowings == input.NetBorrowings ||
                    (this.NetBorrowings != null &&
                    this.NetBorrowings.Equals(input.NetBorrowings))
                ) && 
                (
                    this.ChangeInWorkingCapital == input.ChangeInWorkingCapital ||
                    (this.ChangeInWorkingCapital != null &&
                    this.ChangeInWorkingCapital.Equals(input.ChangeInWorkingCapital))
                ) && 
                (
                    this.OtherNonCashItems == input.OtherNonCashItems ||
                    (this.OtherNonCashItems != null &&
                    this.OtherNonCashItems.Equals(input.OtherNonCashItems))
                ) && 
                (
                    this.FreeCashFlow == input.FreeCashFlow ||
                    (this.FreeCashFlow != null &&
                    this.FreeCashFlow.Equals(input.FreeCashFlow))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OperatingCashFlow != null)
                    hashCode = hashCode * 59 + this.OperatingCashFlow.GetHashCode();
                if (this.PaymentsForOperatingActivities != null)
                    hashCode = hashCode * 59 + this.PaymentsForOperatingActivities.GetHashCode();
                if (this.ProceedsFromOperatingActivities != null)
                    hashCode = hashCode * 59 + this.ProceedsFromOperatingActivities.GetHashCode();
                if (this.ChangeInOperatingLiabilities != null)
                    hashCode = hashCode * 59 + this.ChangeInOperatingLiabilities.GetHashCode();
                if (this.ChangeInOperatingAssets != null)
                    hashCode = hashCode * 59 + this.ChangeInOperatingAssets.GetHashCode();
                if (this.DepreciationDepletionAndAmortization != null)
                    hashCode = hashCode * 59 + this.DepreciationDepletionAndAmortization.GetHashCode();
                if (this.CapitalExpenditures != null)
                    hashCode = hashCode * 59 + this.CapitalExpenditures.GetHashCode();
                if (this.ChangeInReceivables != null)
                    hashCode = hashCode * 59 + this.ChangeInReceivables.GetHashCode();
                if (this.ChangeInInventory != null)
                    hashCode = hashCode * 59 + this.ChangeInInventory.GetHashCode();
                if (this.ProfitLoss != null)
                    hashCode = hashCode * 59 + this.ProfitLoss.GetHashCode();
                if (this.Investments != null)
                    hashCode = hashCode * 59 + this.Investments.GetHashCode();
                if (this.CashFlowFromInvestment != null)
                    hashCode = hashCode * 59 + this.CashFlowFromInvestment.GetHashCode();
                if (this.CashFlowFromFinancing != null)
                    hashCode = hashCode * 59 + this.CashFlowFromFinancing.GetHashCode();
                if (this.ProceedsFromRepaymentsOfShortTermDebt != null)
                    hashCode = hashCode * 59 + this.ProceedsFromRepaymentsOfShortTermDebt.GetHashCode();
                if (this.PaymentsForRepurchaseOfCommonStock != null)
                    hashCode = hashCode * 59 + this.PaymentsForRepurchaseOfCommonStock.GetHashCode();
                if (this.PaymentsForRepurchaseOfEquity != null)
                    hashCode = hashCode * 59 + this.PaymentsForRepurchaseOfEquity.GetHashCode();
                if (this.PaymentsForRepurchaseOfPreferredStock != null)
                    hashCode = hashCode * 59 + this.PaymentsForRepurchaseOfPreferredStock.GetHashCode();
                if (this.DividendPayout != null)
                    hashCode = hashCode * 59 + this.DividendPayout.GetHashCode();
                if (this.DividendPayoutCommonStock != null)
                    hashCode = hashCode * 59 + this.DividendPayoutCommonStock.GetHashCode();
                if (this.DividendPayoutPreferredStock != null)
                    hashCode = hashCode * 59 + this.DividendPayoutPreferredStock.GetHashCode();
                if (this.ProceedsFromIssuanceOfCommonStock != null)
                    hashCode = hashCode * 59 + this.ProceedsFromIssuanceOfCommonStock.GetHashCode();
                if (this.ProceedsFromIssuanceOfLongTermDebtAndCapitalSecuritiesNet != null)
                    hashCode = hashCode * 59 + this.ProceedsFromIssuanceOfLongTermDebtAndCapitalSecuritiesNet.GetHashCode();
                if (this.ProceedsFromIssuanceOfPreferredStock != null)
                    hashCode = hashCode * 59 + this.ProceedsFromIssuanceOfPreferredStock.GetHashCode();
                if (this.ProceedsFromRepurchaseOfEquity != null)
                    hashCode = hashCode * 59 + this.ProceedsFromRepurchaseOfEquity.GetHashCode();
                if (this.ProceedsFromSaleOfTreasuryStock != null)
                    hashCode = hashCode * 59 + this.ProceedsFromSaleOfTreasuryStock.GetHashCode();
                if (this.ChangeInCashAndCashEquivalents != null)
                    hashCode = hashCode * 59 + this.ChangeInCashAndCashEquivalents.GetHashCode();
                if (this.ChangeInExchangeRate != null)
                    hashCode = hashCode * 59 + this.ChangeInExchangeRate.GetHashCode();
                if (this.NetIncome != null)
                    hashCode = hashCode * 59 + this.NetIncome.GetHashCode();
                if (this.NetBorrowings != null)
                    hashCode = hashCode * 59 + this.NetBorrowings.GetHashCode();
                if (this.ChangeInWorkingCapital != null)
                    hashCode = hashCode * 59 + this.ChangeInWorkingCapital.GetHashCode();
                if (this.OtherNonCashItems != null)
                    hashCode = hashCode * 59 + this.OtherNonCashItems.GetHashCode();
                if (this.FreeCashFlow != null)
                    hashCode = hashCode * 59 + this.FreeCashFlow.GetHashCode();
                return hashCode;
            }
        }
    }
}
