/* 
 * Stocks
 *
 * <h3>Rate limits</h3>                     Free subscriptions are subject to daily limits. To know how much requests you have left look at the following headers in the response.<br />                     1. <strong>x-ratelimit-limit</strong> - The total number of requests that you are allowed to make in a given period (hour/day)<br />                     2. <strong>x-ratelimit-remaining</strong> - The number of remaining requests that you can perform in the current period.<br />                     3. <strong>x-ratelimit-reset</strong> - The number of seconds until the current period resets.<br />                     <br />                     <br />                     You don't have an API key? <a href=\"https://www.equibles.com/api/pricing\" target=\"_blank\">Get one for free here.</a>
 *
 * OpenAPI spec version: v1
 * Contact: contact@equibles.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Equibles.Stocks.Client.SwaggerDateConverter;

namespace Equibles.Stocks.Model
{
    /// <summary>
    /// FinancialReport
    /// </summary>
    [DataContract]
        public partial class FinancialReport :  IEquatable<FinancialReport>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FinancialReport" /> class.
        /// </summary>
        /// <param name="balanceSheet">balanceSheet.</param>
        /// <param name="cashFlowStatement">cashFlowStatement.</param>
        /// <param name="incomeStatement">incomeStatement.</param>
        /// <param name="startDate">startDate.</param>
        /// <param name="endDate">endDate.</param>
        /// <param name="fiscalPeriod">fiscalPeriod.</param>
        /// <param name="year">year.</param>
        public FinancialReport(BalanceSheet balanceSheet = default(BalanceSheet), CashFlowStatement cashFlowStatement = default(CashFlowStatement), IncomeStatement incomeStatement = default(IncomeStatement), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), FiscalPeriod fiscalPeriod = default(FiscalPeriod), int? year = default(int?))
        {
            this.BalanceSheet = balanceSheet;
            this.CashFlowStatement = cashFlowStatement;
            this.IncomeStatement = incomeStatement;
            this.StartDate = startDate;
            this.EndDate = endDate;
            this.FiscalPeriod = fiscalPeriod;
            this.Year = year;
        }
        
        /// <summary>
        /// Gets or Sets BalanceSheet
        /// </summary>
        [DataMember(Name="balanceSheet", EmitDefaultValue=false)]
        public BalanceSheet BalanceSheet { get; set; }

        /// <summary>
        /// Gets or Sets CashFlowStatement
        /// </summary>
        [DataMember(Name="cashFlowStatement", EmitDefaultValue=false)]
        public CashFlowStatement CashFlowStatement { get; set; }

        /// <summary>
        /// Gets or Sets IncomeStatement
        /// </summary>
        [DataMember(Name="incomeStatement", EmitDefaultValue=false)]
        public IncomeStatement IncomeStatement { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name="startDate", EmitDefaultValue=false)]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// Gets or Sets EndDate
        /// </summary>
        [DataMember(Name="endDate", EmitDefaultValue=false)]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Gets or Sets FiscalPeriod
        /// </summary>
        [DataMember(Name="fiscalPeriod", EmitDefaultValue=false)]
        public FiscalPeriod FiscalPeriod { get; set; }

        /// <summary>
        /// Gets or Sets Year
        /// </summary>
        [DataMember(Name="year", EmitDefaultValue=false)]
        public int? Year { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FinancialReport {\n");
            sb.Append("  BalanceSheet: ").Append(BalanceSheet).Append("\n");
            sb.Append("  CashFlowStatement: ").Append(CashFlowStatement).Append("\n");
            sb.Append("  IncomeStatement: ").Append(IncomeStatement).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  FiscalPeriod: ").Append(FiscalPeriod).Append("\n");
            sb.Append("  Year: ").Append(Year).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FinancialReport);
        }

        /// <summary>
        /// Returns true if FinancialReport instances are equal
        /// </summary>
        /// <param name="input">Instance of FinancialReport to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FinancialReport input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BalanceSheet == input.BalanceSheet ||
                    (this.BalanceSheet != null &&
                    this.BalanceSheet.Equals(input.BalanceSheet))
                ) && 
                (
                    this.CashFlowStatement == input.CashFlowStatement ||
                    (this.CashFlowStatement != null &&
                    this.CashFlowStatement.Equals(input.CashFlowStatement))
                ) && 
                (
                    this.IncomeStatement == input.IncomeStatement ||
                    (this.IncomeStatement != null &&
                    this.IncomeStatement.Equals(input.IncomeStatement))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.FiscalPeriod == input.FiscalPeriod ||
                    (this.FiscalPeriod != null &&
                    this.FiscalPeriod.Equals(input.FiscalPeriod))
                ) && 
                (
                    this.Year == input.Year ||
                    (this.Year != null &&
                    this.Year.Equals(input.Year))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BalanceSheet != null)
                    hashCode = hashCode * 59 + this.BalanceSheet.GetHashCode();
                if (this.CashFlowStatement != null)
                    hashCode = hashCode * 59 + this.CashFlowStatement.GetHashCode();
                if (this.IncomeStatement != null)
                    hashCode = hashCode * 59 + this.IncomeStatement.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.FiscalPeriod != null)
                    hashCode = hashCode * 59 + this.FiscalPeriod.GetHashCode();
                if (this.Year != null)
                    hashCode = hashCode * 59 + this.Year.GetHashCode();
                return hashCode;
            }
        }
    }
}
