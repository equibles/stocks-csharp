/* 
 * Stocks
 *
 * <h3>Rate limits</h3>                     Free subscriptions are subject to daily limits. To know how much requests you have left look at the following headers in the response.<br />                     1. <strong>x-ratelimit-limit</strong> - The total number of requests that you are allowed to make in a given period (hour/day)<br />                     2. <strong>x-ratelimit-remaining</strong> - The number of remaining requests that you can perform in the current period.<br />                     3. <strong>x-ratelimit-reset</strong> - The number of seconds until the current period resets.<br />                     <br />                     <br />                     You don't have an API key? <a href=\"https://www.equibles.com/api/pricing\" target=\"_blank\">Get one for free here.</a>
 *
 * OpenAPI spec version: v1
 * Contact: contact@equibles.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Equibles.Stocks.Client.SwaggerDateConverter;

namespace Equibles.Stocks.Model
{
    /// <summary>
    /// Image
    /// </summary>
    [DataContract]
        public partial class Image :  IEquatable<Image>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Image" /> class.
        /// </summary>
        /// <param name="size">The size of the image in bytes..</param>
        /// <param name="extension">The image extension. I.e. png..</param>
        /// <param name="filename">The image name..</param>
        /// <param name="contentType">The content type. I.e. image/png..</param>
        /// <param name="webPath">The url of the folder where the image is stored..</param>
        /// <param name="webPathname">The url where the image stored. You can use this URL to download the image..</param>
        /// <param name="width">The width in pixels of the image..</param>
        /// <param name="height">The height in pixels of the image..</param>
        public Image(long? size = default(long?), string extension = default(string), string filename = default(string), string contentType = default(string), string webPath = default(string), string webPathname = default(string), int? width = default(int?), int? height = default(int?))
        {
            this.Size = size;
            this.Extension = extension;
            this.Filename = filename;
            this.ContentType = contentType;
            this.WebPath = webPath;
            this.WebPathname = webPathname;
            this.Width = width;
            this.Height = height;
        }
        
        /// <summary>
        /// The size of the image in bytes.
        /// </summary>
        /// <value>The size of the image in bytes.</value>
        [DataMember(Name="size", EmitDefaultValue=false)]
        public long? Size { get; set; }

        /// <summary>
        /// The image extension. I.e. png.
        /// </summary>
        /// <value>The image extension. I.e. png.</value>
        [DataMember(Name="extension", EmitDefaultValue=false)]
        public string Extension { get; set; }

        /// <summary>
        /// The image name.
        /// </summary>
        /// <value>The image name.</value>
        [DataMember(Name="filename", EmitDefaultValue=false)]
        public string Filename { get; set; }

        /// <summary>
        /// The content type. I.e. image/png.
        /// </summary>
        /// <value>The content type. I.e. image/png.</value>
        [DataMember(Name="contentType", EmitDefaultValue=false)]
        public string ContentType { get; set; }

        /// <summary>
        /// The url of the folder where the image is stored.
        /// </summary>
        /// <value>The url of the folder where the image is stored.</value>
        [DataMember(Name="webPath", EmitDefaultValue=false)]
        public string WebPath { get; set; }

        /// <summary>
        /// The url where the image stored. You can use this URL to download the image.
        /// </summary>
        /// <value>The url where the image stored. You can use this URL to download the image.</value>
        [DataMember(Name="webPathname", EmitDefaultValue=false)]
        public string WebPathname { get; set; }

        /// <summary>
        /// The width in pixels of the image.
        /// </summary>
        /// <value>The width in pixels of the image.</value>
        [DataMember(Name="width", EmitDefaultValue=false)]
        public int? Width { get; set; }

        /// <summary>
        /// The height in pixels of the image.
        /// </summary>
        /// <value>The height in pixels of the image.</value>
        [DataMember(Name="height", EmitDefaultValue=false)]
        public int? Height { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Image {\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Extension: ").Append(Extension).Append("\n");
            sb.Append("  Filename: ").Append(Filename).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("  WebPath: ").Append(WebPath).Append("\n");
            sb.Append("  WebPathname: ").Append(WebPathname).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Image);
        }

        /// <summary>
        /// Returns true if Image instances are equal
        /// </summary>
        /// <param name="input">Instance of Image to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Image input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Size == input.Size ||
                    (this.Size != null &&
                    this.Size.Equals(input.Size))
                ) && 
                (
                    this.Extension == input.Extension ||
                    (this.Extension != null &&
                    this.Extension.Equals(input.Extension))
                ) && 
                (
                    this.Filename == input.Filename ||
                    (this.Filename != null &&
                    this.Filename.Equals(input.Filename))
                ) && 
                (
                    this.ContentType == input.ContentType ||
                    (this.ContentType != null &&
                    this.ContentType.Equals(input.ContentType))
                ) && 
                (
                    this.WebPath == input.WebPath ||
                    (this.WebPath != null &&
                    this.WebPath.Equals(input.WebPath))
                ) && 
                (
                    this.WebPathname == input.WebPathname ||
                    (this.WebPathname != null &&
                    this.WebPathname.Equals(input.WebPathname))
                ) && 
                (
                    this.Width == input.Width ||
                    (this.Width != null &&
                    this.Width.Equals(input.Width))
                ) && 
                (
                    this.Height == input.Height ||
                    (this.Height != null &&
                    this.Height.Equals(input.Height))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Size != null)
                    hashCode = hashCode * 59 + this.Size.GetHashCode();
                if (this.Extension != null)
                    hashCode = hashCode * 59 + this.Extension.GetHashCode();
                if (this.Filename != null)
                    hashCode = hashCode * 59 + this.Filename.GetHashCode();
                if (this.ContentType != null)
                    hashCode = hashCode * 59 + this.ContentType.GetHashCode();
                if (this.WebPath != null)
                    hashCode = hashCode * 59 + this.WebPath.GetHashCode();
                if (this.WebPathname != null)
                    hashCode = hashCode * 59 + this.WebPathname.GetHashCode();
                if (this.Width != null)
                    hashCode = hashCode * 59 + this.Width.GetHashCode();
                if (this.Height != null)
                    hashCode = hashCode * 59 + this.Height.GetHashCode();
                return hashCode;
            }
        }
    }
}
