/* 
 * Stocks
 *
 * <h3>Rate limits</h3>                     Free subscriptions are subject to daily limits. To know how much requests you have left look at the following headers in the response.<br />                     1. <strong>x-ratelimit-limit</strong> - The total number of requests that you are allowed to make in a given period (hour/day)<br />                     2. <strong>x-ratelimit-remaining</strong> - The number of remaining requests that you can perform in the current period.<br />                     3. <strong>x-ratelimit-reset</strong> - The number of seconds until the current period resets.<br />                     <br />                     <br />                     You don't have an API key? <a href=\"https://www.equibles.com/api/pricing\" target=\"_blank\">Get one for free here.</a>
 *
 * OpenAPI spec version: v1
 * Contact: contact@equibles.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Equibles.Stocks.Client.SwaggerDateConverter;

namespace Equibles.Stocks.Model
{
    /// <summary>
    /// News
    /// </summary>
    [DataContract]
        public partial class News :  IEquatable<News>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="News" /> class.
        /// </summary>
        /// <param name="title">title.</param>
        /// <param name="ampUrl">ampUrl.</param>
        /// <param name="articleUrl">articleUrl.</param>
        /// <param name="author">author.</param>
        /// <param name="description">description.</param>
        /// <param name="imageUrl">imageUrl.</param>
        /// <param name="keywords">keywords.</param>
        /// <param name="financialAssets">financialAssets.</param>
        /// <param name="publishedTime">publishedTime.</param>
        /// <param name="publisherName">publisherName.</param>
        public News(string title = default(string), string ampUrl = default(string), string articleUrl = default(string), string author = default(string), string description = default(string), string imageUrl = default(string), List<string> keywords = default(List<string>), List<string> financialAssets = default(List<string>), DateTime? publishedTime = default(DateTime?), string publisherName = default(string))
        {
            this.Title = title;
            this.AmpUrl = ampUrl;
            this.ArticleUrl = articleUrl;
            this.Author = author;
            this.Description = description;
            this.ImageUrl = imageUrl;
            this.Keywords = keywords;
            this.FinancialAssets = financialAssets;
            this.PublishedTime = publishedTime;
            this.PublisherName = publisherName;
        }
        
        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets AmpUrl
        /// </summary>
        [DataMember(Name="ampUrl", EmitDefaultValue=false)]
        public string AmpUrl { get; set; }

        /// <summary>
        /// Gets or Sets ArticleUrl
        /// </summary>
        [DataMember(Name="articleUrl", EmitDefaultValue=false)]
        public string ArticleUrl { get; set; }

        /// <summary>
        /// Gets or Sets Author
        /// </summary>
        [DataMember(Name="author", EmitDefaultValue=false)]
        public string Author { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets ImageUrl
        /// </summary>
        [DataMember(Name="imageUrl", EmitDefaultValue=false)]
        public string ImageUrl { get; set; }

        /// <summary>
        /// Gets or Sets Keywords
        /// </summary>
        [DataMember(Name="keywords", EmitDefaultValue=false)]
        public List<string> Keywords { get; set; }

        /// <summary>
        /// Gets or Sets FinancialAssets
        /// </summary>
        [DataMember(Name="financialAssets", EmitDefaultValue=false)]
        public List<string> FinancialAssets { get; set; }

        /// <summary>
        /// Gets or Sets PublishedTime
        /// </summary>
        [DataMember(Name="publishedTime", EmitDefaultValue=false)]
        public DateTime? PublishedTime { get; set; }

        /// <summary>
        /// Gets or Sets PublisherName
        /// </summary>
        [DataMember(Name="publisherName", EmitDefaultValue=false)]
        public string PublisherName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class News {\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  AmpUrl: ").Append(AmpUrl).Append("\n");
            sb.Append("  ArticleUrl: ").Append(ArticleUrl).Append("\n");
            sb.Append("  Author: ").Append(Author).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ImageUrl: ").Append(ImageUrl).Append("\n");
            sb.Append("  Keywords: ").Append(Keywords).Append("\n");
            sb.Append("  FinancialAssets: ").Append(FinancialAssets).Append("\n");
            sb.Append("  PublishedTime: ").Append(PublishedTime).Append("\n");
            sb.Append("  PublisherName: ").Append(PublisherName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as News);
        }

        /// <summary>
        /// Returns true if News instances are equal
        /// </summary>
        /// <param name="input">Instance of News to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(News input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.AmpUrl == input.AmpUrl ||
                    (this.AmpUrl != null &&
                    this.AmpUrl.Equals(input.AmpUrl))
                ) && 
                (
                    this.ArticleUrl == input.ArticleUrl ||
                    (this.ArticleUrl != null &&
                    this.ArticleUrl.Equals(input.ArticleUrl))
                ) && 
                (
                    this.Author == input.Author ||
                    (this.Author != null &&
                    this.Author.Equals(input.Author))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.ImageUrl == input.ImageUrl ||
                    (this.ImageUrl != null &&
                    this.ImageUrl.Equals(input.ImageUrl))
                ) && 
                (
                    this.Keywords == input.Keywords ||
                    this.Keywords != null &&
                    input.Keywords != null &&
                    this.Keywords.SequenceEqual(input.Keywords)
                ) && 
                (
                    this.FinancialAssets == input.FinancialAssets ||
                    this.FinancialAssets != null &&
                    input.FinancialAssets != null &&
                    this.FinancialAssets.SequenceEqual(input.FinancialAssets)
                ) && 
                (
                    this.PublishedTime == input.PublishedTime ||
                    (this.PublishedTime != null &&
                    this.PublishedTime.Equals(input.PublishedTime))
                ) && 
                (
                    this.PublisherName == input.PublisherName ||
                    (this.PublisherName != null &&
                    this.PublisherName.Equals(input.PublisherName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.AmpUrl != null)
                    hashCode = hashCode * 59 + this.AmpUrl.GetHashCode();
                if (this.ArticleUrl != null)
                    hashCode = hashCode * 59 + this.ArticleUrl.GetHashCode();
                if (this.Author != null)
                    hashCode = hashCode * 59 + this.Author.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.ImageUrl != null)
                    hashCode = hashCode * 59 + this.ImageUrl.GetHashCode();
                if (this.Keywords != null)
                    hashCode = hashCode * 59 + this.Keywords.GetHashCode();
                if (this.FinancialAssets != null)
                    hashCode = hashCode * 59 + this.FinancialAssets.GetHashCode();
                if (this.PublishedTime != null)
                    hashCode = hashCode * 59 + this.PublishedTime.GetHashCode();
                if (this.PublisherName != null)
                    hashCode = hashCode * 59 + this.PublisherName.GetHashCode();
                return hashCode;
            }
        }
    }
}
