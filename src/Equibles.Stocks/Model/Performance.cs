/* 
 * Stocks
 *
 * <h3>Rate limits</h3>                     Free subscriptions are subject to daily limits. To know how much requests you have left look at the following headers in the response.<br />                     1. <strong>x-ratelimit-limit</strong> - The total number of requests that you are allowed to make in a given period (hour/day)<br />                     2. <strong>x-ratelimit-remaining</strong> - The number of remaining requests that you can perform in the current period.<br />                     3. <strong>x-ratelimit-reset</strong> - The number of seconds until the current period resets.<br />                     <br />                     <br />                     You don't have an API key? <a href=\"https://www.equibles.com/api/pricing\" target=\"_blank\">Get one for free here.</a>
 *
 * OpenAPI spec version: v1
 * Contact: contact@equibles.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Equibles.Stocks.Client.SwaggerDateConverter;

namespace Equibles.Stocks.Model
{
    /// <summary>
    /// Performance
    /// </summary>
    [DataContract]
        public partial class Performance :  IEquatable<Performance>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Performance" /> class.
        /// </summary>
        /// <param name="lastUpdate">lastUpdate.</param>
        /// <param name="oneDay">oneDay.</param>
        /// <param name="oneWeek">oneWeek.</param>
        /// <param name="twoWeeks">twoWeeks.</param>
        /// <param name="oneMonth">oneMonth.</param>
        /// <param name="threeMonths">threeMonths.</param>
        /// <param name="sixMonths">sixMonths.</param>
        /// <param name="yearToDate">yearToDate.</param>
        /// <param name="oneYear">oneYear.</param>
        /// <param name="twoYears">twoYears.</param>
        /// <param name="twoYearsAnnualized">twoYearsAnnualized.</param>
        /// <param name="threeYears">threeYears.</param>
        /// <param name="threeYearsAnnualized">threeYearsAnnualized.</param>
        /// <param name="fiveYears">fiveYears.</param>
        /// <param name="fiveYearsAnnualized">fiveYearsAnnualized.</param>
        /// <param name="tenYears">tenYears.</param>
        /// <param name="tenYearsAnnualized">tenYearsAnnualized.</param>
        /// <param name="twentyYears">twentyYears.</param>
        /// <param name="twentyYearsAnnualized">twentyYearsAnnualized.</param>
        public Performance(DateTime? lastUpdate = default(DateTime?), double? oneDay = default(double?), double? oneWeek = default(double?), double? twoWeeks = default(double?), double? oneMonth = default(double?), double? threeMonths = default(double?), double? sixMonths = default(double?), double? yearToDate = default(double?), double? oneYear = default(double?), double? twoYears = default(double?), double? twoYearsAnnualized = default(double?), double? threeYears = default(double?), double? threeYearsAnnualized = default(double?), double? fiveYears = default(double?), double? fiveYearsAnnualized = default(double?), double? tenYears = default(double?), double? tenYearsAnnualized = default(double?), double? twentyYears = default(double?), double? twentyYearsAnnualized = default(double?))
        {
            this.LastUpdate = lastUpdate;
            this.OneDay = oneDay;
            this.OneWeek = oneWeek;
            this.TwoWeeks = twoWeeks;
            this.OneMonth = oneMonth;
            this.ThreeMonths = threeMonths;
            this.SixMonths = sixMonths;
            this.YearToDate = yearToDate;
            this.OneYear = oneYear;
            this.TwoYears = twoYears;
            this.TwoYearsAnnualized = twoYearsAnnualized;
            this.ThreeYears = threeYears;
            this.ThreeYearsAnnualized = threeYearsAnnualized;
            this.FiveYears = fiveYears;
            this.FiveYearsAnnualized = fiveYearsAnnualized;
            this.TenYears = tenYears;
            this.TenYearsAnnualized = tenYearsAnnualized;
            this.TwentyYears = twentyYears;
            this.TwentyYearsAnnualized = twentyYearsAnnualized;
        }
        
        /// <summary>
        /// Gets or Sets LastUpdate
        /// </summary>
        [DataMember(Name="lastUpdate", EmitDefaultValue=false)]
        public DateTime? LastUpdate { get; set; }

        /// <summary>
        /// Gets or Sets OneDay
        /// </summary>
        [DataMember(Name="oneDay", EmitDefaultValue=false)]
        public double? OneDay { get; set; }

        /// <summary>
        /// Gets or Sets OneWeek
        /// </summary>
        [DataMember(Name="oneWeek", EmitDefaultValue=false)]
        public double? OneWeek { get; set; }

        /// <summary>
        /// Gets or Sets TwoWeeks
        /// </summary>
        [DataMember(Name="twoWeeks", EmitDefaultValue=false)]
        public double? TwoWeeks { get; set; }

        /// <summary>
        /// Gets or Sets OneMonth
        /// </summary>
        [DataMember(Name="oneMonth", EmitDefaultValue=false)]
        public double? OneMonth { get; set; }

        /// <summary>
        /// Gets or Sets ThreeMonths
        /// </summary>
        [DataMember(Name="threeMonths", EmitDefaultValue=false)]
        public double? ThreeMonths { get; set; }

        /// <summary>
        /// Gets or Sets SixMonths
        /// </summary>
        [DataMember(Name="sixMonths", EmitDefaultValue=false)]
        public double? SixMonths { get; set; }

        /// <summary>
        /// Gets or Sets YearToDate
        /// </summary>
        [DataMember(Name="yearToDate", EmitDefaultValue=false)]
        public double? YearToDate { get; set; }

        /// <summary>
        /// Gets or Sets OneYear
        /// </summary>
        [DataMember(Name="oneYear", EmitDefaultValue=false)]
        public double? OneYear { get; set; }

        /// <summary>
        /// Gets or Sets TwoYears
        /// </summary>
        [DataMember(Name="twoYears", EmitDefaultValue=false)]
        public double? TwoYears { get; set; }

        /// <summary>
        /// Gets or Sets TwoYearsAnnualized
        /// </summary>
        [DataMember(Name="twoYearsAnnualized", EmitDefaultValue=false)]
        public double? TwoYearsAnnualized { get; set; }

        /// <summary>
        /// Gets or Sets ThreeYears
        /// </summary>
        [DataMember(Name="threeYears", EmitDefaultValue=false)]
        public double? ThreeYears { get; set; }

        /// <summary>
        /// Gets or Sets ThreeYearsAnnualized
        /// </summary>
        [DataMember(Name="threeYearsAnnualized", EmitDefaultValue=false)]
        public double? ThreeYearsAnnualized { get; set; }

        /// <summary>
        /// Gets or Sets FiveYears
        /// </summary>
        [DataMember(Name="fiveYears", EmitDefaultValue=false)]
        public double? FiveYears { get; set; }

        /// <summary>
        /// Gets or Sets FiveYearsAnnualized
        /// </summary>
        [DataMember(Name="fiveYearsAnnualized", EmitDefaultValue=false)]
        public double? FiveYearsAnnualized { get; set; }

        /// <summary>
        /// Gets or Sets TenYears
        /// </summary>
        [DataMember(Name="tenYears", EmitDefaultValue=false)]
        public double? TenYears { get; set; }

        /// <summary>
        /// Gets or Sets TenYearsAnnualized
        /// </summary>
        [DataMember(Name="tenYearsAnnualized", EmitDefaultValue=false)]
        public double? TenYearsAnnualized { get; set; }

        /// <summary>
        /// Gets or Sets TwentyYears
        /// </summary>
        [DataMember(Name="twentyYears", EmitDefaultValue=false)]
        public double? TwentyYears { get; set; }

        /// <summary>
        /// Gets or Sets TwentyYearsAnnualized
        /// </summary>
        [DataMember(Name="twentyYearsAnnualized", EmitDefaultValue=false)]
        public double? TwentyYearsAnnualized { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Performance {\n");
            sb.Append("  LastUpdate: ").Append(LastUpdate).Append("\n");
            sb.Append("  OneDay: ").Append(OneDay).Append("\n");
            sb.Append("  OneWeek: ").Append(OneWeek).Append("\n");
            sb.Append("  TwoWeeks: ").Append(TwoWeeks).Append("\n");
            sb.Append("  OneMonth: ").Append(OneMonth).Append("\n");
            sb.Append("  ThreeMonths: ").Append(ThreeMonths).Append("\n");
            sb.Append("  SixMonths: ").Append(SixMonths).Append("\n");
            sb.Append("  YearToDate: ").Append(YearToDate).Append("\n");
            sb.Append("  OneYear: ").Append(OneYear).Append("\n");
            sb.Append("  TwoYears: ").Append(TwoYears).Append("\n");
            sb.Append("  TwoYearsAnnualized: ").Append(TwoYearsAnnualized).Append("\n");
            sb.Append("  ThreeYears: ").Append(ThreeYears).Append("\n");
            sb.Append("  ThreeYearsAnnualized: ").Append(ThreeYearsAnnualized).Append("\n");
            sb.Append("  FiveYears: ").Append(FiveYears).Append("\n");
            sb.Append("  FiveYearsAnnualized: ").Append(FiveYearsAnnualized).Append("\n");
            sb.Append("  TenYears: ").Append(TenYears).Append("\n");
            sb.Append("  TenYearsAnnualized: ").Append(TenYearsAnnualized).Append("\n");
            sb.Append("  TwentyYears: ").Append(TwentyYears).Append("\n");
            sb.Append("  TwentyYearsAnnualized: ").Append(TwentyYearsAnnualized).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Performance);
        }

        /// <summary>
        /// Returns true if Performance instances are equal
        /// </summary>
        /// <param name="input">Instance of Performance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Performance input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LastUpdate == input.LastUpdate ||
                    (this.LastUpdate != null &&
                    this.LastUpdate.Equals(input.LastUpdate))
                ) && 
                (
                    this.OneDay == input.OneDay ||
                    (this.OneDay != null &&
                    this.OneDay.Equals(input.OneDay))
                ) && 
                (
                    this.OneWeek == input.OneWeek ||
                    (this.OneWeek != null &&
                    this.OneWeek.Equals(input.OneWeek))
                ) && 
                (
                    this.TwoWeeks == input.TwoWeeks ||
                    (this.TwoWeeks != null &&
                    this.TwoWeeks.Equals(input.TwoWeeks))
                ) && 
                (
                    this.OneMonth == input.OneMonth ||
                    (this.OneMonth != null &&
                    this.OneMonth.Equals(input.OneMonth))
                ) && 
                (
                    this.ThreeMonths == input.ThreeMonths ||
                    (this.ThreeMonths != null &&
                    this.ThreeMonths.Equals(input.ThreeMonths))
                ) && 
                (
                    this.SixMonths == input.SixMonths ||
                    (this.SixMonths != null &&
                    this.SixMonths.Equals(input.SixMonths))
                ) && 
                (
                    this.YearToDate == input.YearToDate ||
                    (this.YearToDate != null &&
                    this.YearToDate.Equals(input.YearToDate))
                ) && 
                (
                    this.OneYear == input.OneYear ||
                    (this.OneYear != null &&
                    this.OneYear.Equals(input.OneYear))
                ) && 
                (
                    this.TwoYears == input.TwoYears ||
                    (this.TwoYears != null &&
                    this.TwoYears.Equals(input.TwoYears))
                ) && 
                (
                    this.TwoYearsAnnualized == input.TwoYearsAnnualized ||
                    (this.TwoYearsAnnualized != null &&
                    this.TwoYearsAnnualized.Equals(input.TwoYearsAnnualized))
                ) && 
                (
                    this.ThreeYears == input.ThreeYears ||
                    (this.ThreeYears != null &&
                    this.ThreeYears.Equals(input.ThreeYears))
                ) && 
                (
                    this.ThreeYearsAnnualized == input.ThreeYearsAnnualized ||
                    (this.ThreeYearsAnnualized != null &&
                    this.ThreeYearsAnnualized.Equals(input.ThreeYearsAnnualized))
                ) && 
                (
                    this.FiveYears == input.FiveYears ||
                    (this.FiveYears != null &&
                    this.FiveYears.Equals(input.FiveYears))
                ) && 
                (
                    this.FiveYearsAnnualized == input.FiveYearsAnnualized ||
                    (this.FiveYearsAnnualized != null &&
                    this.FiveYearsAnnualized.Equals(input.FiveYearsAnnualized))
                ) && 
                (
                    this.TenYears == input.TenYears ||
                    (this.TenYears != null &&
                    this.TenYears.Equals(input.TenYears))
                ) && 
                (
                    this.TenYearsAnnualized == input.TenYearsAnnualized ||
                    (this.TenYearsAnnualized != null &&
                    this.TenYearsAnnualized.Equals(input.TenYearsAnnualized))
                ) && 
                (
                    this.TwentyYears == input.TwentyYears ||
                    (this.TwentyYears != null &&
                    this.TwentyYears.Equals(input.TwentyYears))
                ) && 
                (
                    this.TwentyYearsAnnualized == input.TwentyYearsAnnualized ||
                    (this.TwentyYearsAnnualized != null &&
                    this.TwentyYearsAnnualized.Equals(input.TwentyYearsAnnualized))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LastUpdate != null)
                    hashCode = hashCode * 59 + this.LastUpdate.GetHashCode();
                if (this.OneDay != null)
                    hashCode = hashCode * 59 + this.OneDay.GetHashCode();
                if (this.OneWeek != null)
                    hashCode = hashCode * 59 + this.OneWeek.GetHashCode();
                if (this.TwoWeeks != null)
                    hashCode = hashCode * 59 + this.TwoWeeks.GetHashCode();
                if (this.OneMonth != null)
                    hashCode = hashCode * 59 + this.OneMonth.GetHashCode();
                if (this.ThreeMonths != null)
                    hashCode = hashCode * 59 + this.ThreeMonths.GetHashCode();
                if (this.SixMonths != null)
                    hashCode = hashCode * 59 + this.SixMonths.GetHashCode();
                if (this.YearToDate != null)
                    hashCode = hashCode * 59 + this.YearToDate.GetHashCode();
                if (this.OneYear != null)
                    hashCode = hashCode * 59 + this.OneYear.GetHashCode();
                if (this.TwoYears != null)
                    hashCode = hashCode * 59 + this.TwoYears.GetHashCode();
                if (this.TwoYearsAnnualized != null)
                    hashCode = hashCode * 59 + this.TwoYearsAnnualized.GetHashCode();
                if (this.ThreeYears != null)
                    hashCode = hashCode * 59 + this.ThreeYears.GetHashCode();
                if (this.ThreeYearsAnnualized != null)
                    hashCode = hashCode * 59 + this.ThreeYearsAnnualized.GetHashCode();
                if (this.FiveYears != null)
                    hashCode = hashCode * 59 + this.FiveYears.GetHashCode();
                if (this.FiveYearsAnnualized != null)
                    hashCode = hashCode * 59 + this.FiveYearsAnnualized.GetHashCode();
                if (this.TenYears != null)
                    hashCode = hashCode * 59 + this.TenYears.GetHashCode();
                if (this.TenYearsAnnualized != null)
                    hashCode = hashCode * 59 + this.TenYearsAnnualized.GetHashCode();
                if (this.TwentyYears != null)
                    hashCode = hashCode * 59 + this.TwentyYears.GetHashCode();
                if (this.TwentyYearsAnnualized != null)
                    hashCode = hashCode * 59 + this.TwentyYearsAnnualized.GetHashCode();
                return hashCode;
            }
        }
    }
}
