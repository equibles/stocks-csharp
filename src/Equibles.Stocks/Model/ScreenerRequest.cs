/* 
 * Stocks
 *
 * <h3>Rate limits</h3>                     Free subscriptions are subject to daily limits. To know how much requests you have left look at the following headers in the response.<br />                     1. <strong>x-ratelimit-limit</strong> - The total number of requests that you are allowed to make in a given period (hour/day)<br />                     2. <strong>x-ratelimit-remaining</strong> - The number of remaining requests that you can perform in the current period.<br />                     3. <strong>x-ratelimit-reset</strong> - The number of seconds until the current period resets.<br />                     <br />                     <br />                     You don't have an API key? <a href=\"https://www.equibles.com/api/pricing\" target=\"_blank\">Get one for free here.</a>
 *
 * OpenAPI spec version: v1
 * Contact: contact@equibles.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Equibles.Stocks.Client.SwaggerDateConverter;

namespace Equibles.Stocks.Model
{
    /// <summary>
    /// ScreenerRequest
    /// </summary>
    [DataContract]
        public partial class ScreenerRequest :  IEquatable<ScreenerRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ScreenerRequest" /> class.
        /// </summary>
        /// <param name="searchQuery">A textual search term..</param>
        /// <param name="exchangeIds">The ids of the exchanges to use..</param>
        /// <param name="sectorIds">The ids of the sectors to use..</param>
        /// <param name="industryIds">The ids of the industries to use..</param>
        /// <param name="marketCapMin">The minimum market capitalization..</param>
        /// <param name="marketCapMax">The maximum market capitalization..</param>
        /// <param name="betaMin">The minimum price beta for a 5 year period calculated monthly..</param>
        /// <param name="betaMax">The maximum price beta for a 5 year period calculated monthly..</param>
        /// <param name="forwardDividendMin">The minimum current dividend value..</param>
        /// <param name="forwardDividendMax">The maximum current dividend value..</param>
        /// <param name="forwardDividendYieldMin">The minimum current dividend percentage..</param>
        /// <param name="forwardDividendYieldMax">The maximum current dividend percentage..</param>
        /// <param name="shortRatioMin">The minimum short ratio..</param>
        /// <param name="shortRatioMax">The maximum short ratio..</param>
        /// <param name="sharesShortPercentageMin">The minimum percentage of shares short..</param>
        /// <param name="sharesShortPercentageMax">The maximum percentage of shares short..</param>
        /// <param name="sharesShortPreviousMonthPercentageMin">The minimum percentage of shares short on the last month..</param>
        /// <param name="sharesShortPreviousMonthPercentageMax">The maximum percentage of shares short on the last month..</param>
        /// <param name="analystRecommendationMin">analystRecommendationMin.</param>
        /// <param name="analystRecommendationMax">analystRecommendationMax.</param>
        /// <param name="performanceOneDayMin">The minimum stock price percentage change in the last day..</param>
        /// <param name="performanceOneDayMax">The maximum stock price percentage change in the last day..</param>
        /// <param name="performanceOneWeekMin">The minimum stock price percentage change in the last week..</param>
        /// <param name="performanceOneWeekMax">The maximum stock price percentage change in the last week..</param>
        /// <param name="performanceTwoWeeksMin">The minimum stock price percentage change in the last two weeks..</param>
        /// <param name="performanceTwoWeeksMax">The maximum stock price percentage change in the last two weeks..</param>
        /// <param name="performanceOneMonthMin">The minimum stock price percentage change in the last month..</param>
        /// <param name="performanceOneMonthMax">The maximum stock price percentage change in the last month..</param>
        /// <param name="performanceThreeMonthsMin">The minimum stock price percentage change in the last three months..</param>
        /// <param name="performanceThreeMonthsMax">The maximum stock price percentage change in the last three months..</param>
        /// <param name="performanceOneYearMin">The minimum stock price percentage change in the last year..</param>
        /// <param name="performanceOneYearMax">The maximum stock price percentage change in the last year..</param>
        /// <param name="performanceThreeYearsMin">The minimum stock price percentage change in the last three years..</param>
        /// <param name="performanceThreeYearsMax">The maximum stock price percentage change in the last three years..</param>
        /// <param name="performanceFiveYearsMin">The minimum stock price percentage change in the last five years..</param>
        /// <param name="performanceFiveYearsMax">The maximum stock price percentage change in the last five years..</param>
        /// <param name="performanceTenYearsMin">The minimum stock price percentage change in the last ten years..</param>
        /// <param name="performanceTenYearsMax">The maximum stock price percentage change in the last ten years..</param>
        /// <param name="performanceTwentyYearsMin">The minimum stock price percentage change in the last twenty years..</param>
        /// <param name="performanceTwentyYearsMax">The maximum stock price percentage change in the last twenty years..</param>
        /// <param name="epsGrowthOneYearMin">The minimum EPS growth in the last year..</param>
        /// <param name="epsGrowthOneYearMax">The maximum EPS growth in the last year..</param>
        /// <param name="epsGrowthTwoYearsMin">The minimum EPS growth in the last two years. This value is annualized..</param>
        /// <param name="epsGrowthTwoYearsMax">The maximum EPS growth in the last two years. This value is annualized..</param>
        /// <param name="epsGrowthThreeYearsMin">The minimum EPS growth in the last three years. This value is annualized..</param>
        /// <param name="epsGrowthThreeYearsMax">The maximum EPS growth in the last three years. This value is annualized..</param>
        /// <param name="epsGrowthFiveYearsMin">The minimum EPS growth in the last five years. This value is annualized..</param>
        /// <param name="epsGrowthFiveYearsMax">The maximum EPS growth in the last five years. This value is annualized..</param>
        /// <param name="epsGrowthTenYearsMin">The minimum EPS growth in the last ten years. This value is annualized..</param>
        /// <param name="epsGrowthTenYearsMax">The maximum EPS growth in the last ten years. This value is annualized..</param>
        /// <param name="epsGrowthTwentyYearsMin">The minimum EPS growth in the last twenty years. This value is annualized..</param>
        /// <param name="epsGrowthTwentyYearsMax">The maximum EPS growth in the last twenty years. This value is annualized..</param>
        /// <param name="peMin">The minimum price to earnings value..</param>
        /// <param name="peMax">The maximum price to earnings value..</param>
        /// <param name="pegMin">The minimum price to earnings to growth value..</param>
        /// <param name="pegMax">The maximum price to earnings to growth value..</param>
        /// <param name="priceFcfMin">The minimum price to free cash flow value..</param>
        /// <param name="priceFcfMax">The maximum price to free cash flow value..</param>
        /// <param name="bookValuePerShareMin">The minimum book value per share..</param>
        /// <param name="bookValuePerShareMax">The maximum book value per share..</param>
        /// <param name="priceBookValuePerShareMin">The minimum price to book value..</param>
        /// <param name="priceBookValuePerShareMax">The maximum price to book value..</param>
        /// <param name="payoutMin">The minimum payout ratio (as percentage)..</param>
        /// <param name="payoutMax">The maximum payout ratio (as percentage)..</param>
        /// <param name="debtToEquityMin">The minimum debt to equity ratio (as percentage)..</param>
        /// <param name="debtToEquityMax">The maximum debt to equity ratio (as percentage)..</param>
        /// <param name="grossMarginMin">The minimum gross margin (as percentage)..</param>
        /// <param name="grossMarginMax">The maximum gross margin (as percentage)..</param>
        /// <param name="operatingMarginMin">The minimum operating margin (as percentage)..</param>
        /// <param name="operatingMarginMax">The maximum operating margin (as percentage)..</param>
        /// <param name="profitMarginMin">The minimum profit margin (as percentage)..</param>
        /// <param name="profitMarginMax">The maximum profit margin (as percentage)..</param>
        /// <param name="priceToSalesMin">The minimum price to sales ratio..</param>
        /// <param name="priceToSalesMax">The maximum price to sales ratio..</param>
        /// <param name="buybacksThreeMonthsMin">The minimum percentage of shares bought back in the last 3 months. Negative values represent dilution of shares..</param>
        /// <param name="buybacksThreeMonthsMax">The maximum percentage of shares bought back in the last 3 months. Negative values represent dilution of shares..</param>
        /// <param name="buybacksSixMonthsMin">The minimum percentage of shares bought back in the last 6 months. Negative values represent dilution of shares..</param>
        /// <param name="buybacksSixMonthsMax">buybacksSixMonthsMax.</param>
        /// <param name="buybacksOneYearMin">The minimum percentage of shares bought back in the last year. Negative values represent dilution of shares..</param>
        /// <param name="buybacksOneYearMax">The maximum percentage of shares bought back in the last year. Negative values represent dilution of shares..</param>
        /// <param name="buybacksTwoYearsMin">The minimum percentage of shares bought back in the last 2 years. Negative values represent dilution of shares..</param>
        /// <param name="buybacksTwoYearsMax">The maximum percentage of shares bought back in the last 2 years. Negative values represent dilution of shares..</param>
        /// <param name="buybacksThreeYearsMin">The minimum percentage of shares bought back in the last 3 years. Negative values represent dilution of shares..</param>
        /// <param name="buybacksThreeYearsMax">The maximum percentage of shares bought back in the last 3 years. Negative values represent dilution of shares..</param>
        /// <param name="buybacksFiveYearsMin">The minimum percentage of shares bought back in the last 5 years. Negative values represent dilution of shares..</param>
        /// <param name="buybacksFiveYearsMax">The maximum percentage of shares bought back in the last 5 years. Negative values represent dilution of shares..</param>
        /// <param name="buybacksTenYearsMin">The minimum percentage of shares bought back in the last 10 years. Negative values represent dilution of shares..</param>
        /// <param name="buybacksTenYearsMax">The maximum percentage of shares bought back in the last 10 years. Negative values represent dilution of shares..</param>
        /// <param name="buybacksTwentyYearsMin">The minimum percentage of shares bought back in the last 20 years. Negative values represent dilution of shares..</param>
        /// <param name="buybacksTwentyYearsMax">The maximum percentage of shares bought back in the last 20 years. Negative values represent dilution of shares..</param>
        /// <param name="potentialUpside">The upside potential according to the analysts&#x27; target price consensus (as percentage). I.e. If the stock price is $100 and the analysts&#x27; target price consensus is $150 then the potential upside is 50%..</param>
        public ScreenerRequest(string searchQuery = default(string), List<int?> exchangeIds = default(List<int?>), List<int?> sectorIds = default(List<int?>), List<int?> industryIds = default(List<int?>), double? marketCapMin = default(double?), double? marketCapMax = default(double?), double? betaMin = default(double?), double? betaMax = default(double?), double? forwardDividendMin = default(double?), double? forwardDividendMax = default(double?), double? forwardDividendYieldMin = default(double?), double? forwardDividendYieldMax = default(double?), double? shortRatioMin = default(double?), double? shortRatioMax = default(double?), double? sharesShortPercentageMin = default(double?), double? sharesShortPercentageMax = default(double?), double? sharesShortPreviousMonthPercentageMin = default(double?), double? sharesShortPreviousMonthPercentageMax = default(double?), Recommendation analystRecommendationMin = default(Recommendation), Recommendation analystRecommendationMax = default(Recommendation), double? performanceOneDayMin = default(double?), double? performanceOneDayMax = default(double?), double? performanceOneWeekMin = default(double?), double? performanceOneWeekMax = default(double?), double? performanceTwoWeeksMin = default(double?), double? performanceTwoWeeksMax = default(double?), double? performanceOneMonthMin = default(double?), double? performanceOneMonthMax = default(double?), double? performanceThreeMonthsMin = default(double?), double? performanceThreeMonthsMax = default(double?), double? performanceOneYearMin = default(double?), double? performanceOneYearMax = default(double?), double? performanceThreeYearsMin = default(double?), double? performanceThreeYearsMax = default(double?), double? performanceFiveYearsMin = default(double?), double? performanceFiveYearsMax = default(double?), double? performanceTenYearsMin = default(double?), double? performanceTenYearsMax = default(double?), double? performanceTwentyYearsMin = default(double?), double? performanceTwentyYearsMax = default(double?), double? epsGrowthOneYearMin = default(double?), double? epsGrowthOneYearMax = default(double?), double? epsGrowthTwoYearsMin = default(double?), double? epsGrowthTwoYearsMax = default(double?), double? epsGrowthThreeYearsMin = default(double?), double? epsGrowthThreeYearsMax = default(double?), double? epsGrowthFiveYearsMin = default(double?), double? epsGrowthFiveYearsMax = default(double?), double? epsGrowthTenYearsMin = default(double?), double? epsGrowthTenYearsMax = default(double?), double? epsGrowthTwentyYearsMin = default(double?), double? epsGrowthTwentyYearsMax = default(double?), double? peMin = default(double?), double? peMax = default(double?), double? pegMin = default(double?), double? pegMax = default(double?), double? priceFcfMin = default(double?), double? priceFcfMax = default(double?), double? bookValuePerShareMin = default(double?), double? bookValuePerShareMax = default(double?), double? priceBookValuePerShareMin = default(double?), double? priceBookValuePerShareMax = default(double?), double? payoutMin = default(double?), double? payoutMax = default(double?), double? debtToEquityMin = default(double?), double? debtToEquityMax = default(double?), double? grossMarginMin = default(double?), double? grossMarginMax = default(double?), double? operatingMarginMin = default(double?), double? operatingMarginMax = default(double?), double? profitMarginMin = default(double?), double? profitMarginMax = default(double?), double? priceToSalesMin = default(double?), double? priceToSalesMax = default(double?), double? buybacksThreeMonthsMin = default(double?), double? buybacksThreeMonthsMax = default(double?), double? buybacksSixMonthsMin = default(double?), double? buybacksSixMonthsMax = default(double?), double? buybacksOneYearMin = default(double?), double? buybacksOneYearMax = default(double?), double? buybacksTwoYearsMin = default(double?), double? buybacksTwoYearsMax = default(double?), double? buybacksThreeYearsMin = default(double?), double? buybacksThreeYearsMax = default(double?), double? buybacksFiveYearsMin = default(double?), double? buybacksFiveYearsMax = default(double?), double? buybacksTenYearsMin = default(double?), double? buybacksTenYearsMax = default(double?), double? buybacksTwentyYearsMin = default(double?), double? buybacksTwentyYearsMax = default(double?), double? potentialUpside = default(double?))
        {
            this.SearchQuery = searchQuery;
            this.ExchangeIds = exchangeIds;
            this.SectorIds = sectorIds;
            this.IndustryIds = industryIds;
            this.MarketCapMin = marketCapMin;
            this.MarketCapMax = marketCapMax;
            this.BetaMin = betaMin;
            this.BetaMax = betaMax;
            this.ForwardDividendMin = forwardDividendMin;
            this.ForwardDividendMax = forwardDividendMax;
            this.ForwardDividendYieldMin = forwardDividendYieldMin;
            this.ForwardDividendYieldMax = forwardDividendYieldMax;
            this.ShortRatioMin = shortRatioMin;
            this.ShortRatioMax = shortRatioMax;
            this.SharesShortPercentageMin = sharesShortPercentageMin;
            this.SharesShortPercentageMax = sharesShortPercentageMax;
            this.SharesShortPreviousMonthPercentageMin = sharesShortPreviousMonthPercentageMin;
            this.SharesShortPreviousMonthPercentageMax = sharesShortPreviousMonthPercentageMax;
            this.AnalystRecommendationMin = analystRecommendationMin;
            this.AnalystRecommendationMax = analystRecommendationMax;
            this.PerformanceOneDayMin = performanceOneDayMin;
            this.PerformanceOneDayMax = performanceOneDayMax;
            this.PerformanceOneWeekMin = performanceOneWeekMin;
            this.PerformanceOneWeekMax = performanceOneWeekMax;
            this.PerformanceTwoWeeksMin = performanceTwoWeeksMin;
            this.PerformanceTwoWeeksMax = performanceTwoWeeksMax;
            this.PerformanceOneMonthMin = performanceOneMonthMin;
            this.PerformanceOneMonthMax = performanceOneMonthMax;
            this.PerformanceThreeMonthsMin = performanceThreeMonthsMin;
            this.PerformanceThreeMonthsMax = performanceThreeMonthsMax;
            this.PerformanceOneYearMin = performanceOneYearMin;
            this.PerformanceOneYearMax = performanceOneYearMax;
            this.PerformanceThreeYearsMin = performanceThreeYearsMin;
            this.PerformanceThreeYearsMax = performanceThreeYearsMax;
            this.PerformanceFiveYearsMin = performanceFiveYearsMin;
            this.PerformanceFiveYearsMax = performanceFiveYearsMax;
            this.PerformanceTenYearsMin = performanceTenYearsMin;
            this.PerformanceTenYearsMax = performanceTenYearsMax;
            this.PerformanceTwentyYearsMin = performanceTwentyYearsMin;
            this.PerformanceTwentyYearsMax = performanceTwentyYearsMax;
            this.EpsGrowthOneYearMin = epsGrowthOneYearMin;
            this.EpsGrowthOneYearMax = epsGrowthOneYearMax;
            this.EpsGrowthTwoYearsMin = epsGrowthTwoYearsMin;
            this.EpsGrowthTwoYearsMax = epsGrowthTwoYearsMax;
            this.EpsGrowthThreeYearsMin = epsGrowthThreeYearsMin;
            this.EpsGrowthThreeYearsMax = epsGrowthThreeYearsMax;
            this.EpsGrowthFiveYearsMin = epsGrowthFiveYearsMin;
            this.EpsGrowthFiveYearsMax = epsGrowthFiveYearsMax;
            this.EpsGrowthTenYearsMin = epsGrowthTenYearsMin;
            this.EpsGrowthTenYearsMax = epsGrowthTenYearsMax;
            this.EpsGrowthTwentyYearsMin = epsGrowthTwentyYearsMin;
            this.EpsGrowthTwentyYearsMax = epsGrowthTwentyYearsMax;
            this.PeMin = peMin;
            this.PeMax = peMax;
            this.PegMin = pegMin;
            this.PegMax = pegMax;
            this.PriceFcfMin = priceFcfMin;
            this.PriceFcfMax = priceFcfMax;
            this.BookValuePerShareMin = bookValuePerShareMin;
            this.BookValuePerShareMax = bookValuePerShareMax;
            this.PriceBookValuePerShareMin = priceBookValuePerShareMin;
            this.PriceBookValuePerShareMax = priceBookValuePerShareMax;
            this.PayoutMin = payoutMin;
            this.PayoutMax = payoutMax;
            this.DebtToEquityMin = debtToEquityMin;
            this.DebtToEquityMax = debtToEquityMax;
            this.GrossMarginMin = grossMarginMin;
            this.GrossMarginMax = grossMarginMax;
            this.OperatingMarginMin = operatingMarginMin;
            this.OperatingMarginMax = operatingMarginMax;
            this.ProfitMarginMin = profitMarginMin;
            this.ProfitMarginMax = profitMarginMax;
            this.PriceToSalesMin = priceToSalesMin;
            this.PriceToSalesMax = priceToSalesMax;
            this.BuybacksThreeMonthsMin = buybacksThreeMonthsMin;
            this.BuybacksThreeMonthsMax = buybacksThreeMonthsMax;
            this.BuybacksSixMonthsMin = buybacksSixMonthsMin;
            this.BuybacksSixMonthsMax = buybacksSixMonthsMax;
            this.BuybacksOneYearMin = buybacksOneYearMin;
            this.BuybacksOneYearMax = buybacksOneYearMax;
            this.BuybacksTwoYearsMin = buybacksTwoYearsMin;
            this.BuybacksTwoYearsMax = buybacksTwoYearsMax;
            this.BuybacksThreeYearsMin = buybacksThreeYearsMin;
            this.BuybacksThreeYearsMax = buybacksThreeYearsMax;
            this.BuybacksFiveYearsMin = buybacksFiveYearsMin;
            this.BuybacksFiveYearsMax = buybacksFiveYearsMax;
            this.BuybacksTenYearsMin = buybacksTenYearsMin;
            this.BuybacksTenYearsMax = buybacksTenYearsMax;
            this.BuybacksTwentyYearsMin = buybacksTwentyYearsMin;
            this.BuybacksTwentyYearsMax = buybacksTwentyYearsMax;
            this.PotentialUpside = potentialUpside;
        }
        
        /// <summary>
        /// A textual search term.
        /// </summary>
        /// <value>A textual search term.</value>
        [DataMember(Name="searchQuery", EmitDefaultValue=false)]
        public string SearchQuery { get; set; }

        /// <summary>
        /// The ids of the exchanges to use.
        /// </summary>
        /// <value>The ids of the exchanges to use.</value>
        [DataMember(Name="exchangeIds", EmitDefaultValue=false)]
        public List<int?> ExchangeIds { get; set; }

        /// <summary>
        /// The ids of the sectors to use.
        /// </summary>
        /// <value>The ids of the sectors to use.</value>
        [DataMember(Name="sectorIds", EmitDefaultValue=false)]
        public List<int?> SectorIds { get; set; }

        /// <summary>
        /// The ids of the industries to use.
        /// </summary>
        /// <value>The ids of the industries to use.</value>
        [DataMember(Name="industryIds", EmitDefaultValue=false)]
        public List<int?> IndustryIds { get; set; }

        /// <summary>
        /// The minimum market capitalization.
        /// </summary>
        /// <value>The minimum market capitalization.</value>
        [DataMember(Name="marketCapMin", EmitDefaultValue=false)]
        public double? MarketCapMin { get; set; }

        /// <summary>
        /// The maximum market capitalization.
        /// </summary>
        /// <value>The maximum market capitalization.</value>
        [DataMember(Name="marketCapMax", EmitDefaultValue=false)]
        public double? MarketCapMax { get; set; }

        /// <summary>
        /// The minimum price beta for a 5 year period calculated monthly.
        /// </summary>
        /// <value>The minimum price beta for a 5 year period calculated monthly.</value>
        [DataMember(Name="betaMin", EmitDefaultValue=false)]
        public double? BetaMin { get; set; }

        /// <summary>
        /// The maximum price beta for a 5 year period calculated monthly.
        /// </summary>
        /// <value>The maximum price beta for a 5 year period calculated monthly.</value>
        [DataMember(Name="betaMax", EmitDefaultValue=false)]
        public double? BetaMax { get; set; }

        /// <summary>
        /// The minimum current dividend value.
        /// </summary>
        /// <value>The minimum current dividend value.</value>
        [DataMember(Name="forwardDividendMin", EmitDefaultValue=false)]
        public double? ForwardDividendMin { get; set; }

        /// <summary>
        /// The maximum current dividend value.
        /// </summary>
        /// <value>The maximum current dividend value.</value>
        [DataMember(Name="forwardDividendMax", EmitDefaultValue=false)]
        public double? ForwardDividendMax { get; set; }

        /// <summary>
        /// The minimum current dividend percentage.
        /// </summary>
        /// <value>The minimum current dividend percentage.</value>
        [DataMember(Name="forwardDividendYieldMin", EmitDefaultValue=false)]
        public double? ForwardDividendYieldMin { get; set; }

        /// <summary>
        /// The maximum current dividend percentage.
        /// </summary>
        /// <value>The maximum current dividend percentage.</value>
        [DataMember(Name="forwardDividendYieldMax", EmitDefaultValue=false)]
        public double? ForwardDividendYieldMax { get; set; }

        /// <summary>
        /// The minimum short ratio.
        /// </summary>
        /// <value>The minimum short ratio.</value>
        [DataMember(Name="shortRatioMin", EmitDefaultValue=false)]
        public double? ShortRatioMin { get; set; }

        /// <summary>
        /// The maximum short ratio.
        /// </summary>
        /// <value>The maximum short ratio.</value>
        [DataMember(Name="shortRatioMax", EmitDefaultValue=false)]
        public double? ShortRatioMax { get; set; }

        /// <summary>
        /// The minimum percentage of shares short.
        /// </summary>
        /// <value>The minimum percentage of shares short.</value>
        [DataMember(Name="sharesShortPercentageMin", EmitDefaultValue=false)]
        public double? SharesShortPercentageMin { get; set; }

        /// <summary>
        /// The maximum percentage of shares short.
        /// </summary>
        /// <value>The maximum percentage of shares short.</value>
        [DataMember(Name="sharesShortPercentageMax", EmitDefaultValue=false)]
        public double? SharesShortPercentageMax { get; set; }

        /// <summary>
        /// The minimum percentage of shares short on the last month.
        /// </summary>
        /// <value>The minimum percentage of shares short on the last month.</value>
        [DataMember(Name="sharesShortPreviousMonthPercentageMin", EmitDefaultValue=false)]
        public double? SharesShortPreviousMonthPercentageMin { get; set; }

        /// <summary>
        /// The maximum percentage of shares short on the last month.
        /// </summary>
        /// <value>The maximum percentage of shares short on the last month.</value>
        [DataMember(Name="sharesShortPreviousMonthPercentageMax", EmitDefaultValue=false)]
        public double? SharesShortPreviousMonthPercentageMax { get; set; }

        /// <summary>
        /// Gets or Sets AnalystRecommendationMin
        /// </summary>
        [DataMember(Name="analystRecommendationMin", EmitDefaultValue=false)]
        public Recommendation AnalystRecommendationMin { get; set; }

        /// <summary>
        /// Gets or Sets AnalystRecommendationMax
        /// </summary>
        [DataMember(Name="analystRecommendationMax", EmitDefaultValue=false)]
        public Recommendation AnalystRecommendationMax { get; set; }

        /// <summary>
        /// The minimum stock price percentage change in the last day.
        /// </summary>
        /// <value>The minimum stock price percentage change in the last day.</value>
        [DataMember(Name="performanceOneDayMin", EmitDefaultValue=false)]
        public double? PerformanceOneDayMin { get; set; }

        /// <summary>
        /// The maximum stock price percentage change in the last day.
        /// </summary>
        /// <value>The maximum stock price percentage change in the last day.</value>
        [DataMember(Name="performanceOneDayMax", EmitDefaultValue=false)]
        public double? PerformanceOneDayMax { get; set; }

        /// <summary>
        /// The minimum stock price percentage change in the last week.
        /// </summary>
        /// <value>The minimum stock price percentage change in the last week.</value>
        [DataMember(Name="performanceOneWeekMin", EmitDefaultValue=false)]
        public double? PerformanceOneWeekMin { get; set; }

        /// <summary>
        /// The maximum stock price percentage change in the last week.
        /// </summary>
        /// <value>The maximum stock price percentage change in the last week.</value>
        [DataMember(Name="performanceOneWeekMax", EmitDefaultValue=false)]
        public double? PerformanceOneWeekMax { get; set; }

        /// <summary>
        /// The minimum stock price percentage change in the last two weeks.
        /// </summary>
        /// <value>The minimum stock price percentage change in the last two weeks.</value>
        [DataMember(Name="performanceTwoWeeksMin", EmitDefaultValue=false)]
        public double? PerformanceTwoWeeksMin { get; set; }

        /// <summary>
        /// The maximum stock price percentage change in the last two weeks.
        /// </summary>
        /// <value>The maximum stock price percentage change in the last two weeks.</value>
        [DataMember(Name="performanceTwoWeeksMax", EmitDefaultValue=false)]
        public double? PerformanceTwoWeeksMax { get; set; }

        /// <summary>
        /// The minimum stock price percentage change in the last month.
        /// </summary>
        /// <value>The minimum stock price percentage change in the last month.</value>
        [DataMember(Name="performanceOneMonthMin", EmitDefaultValue=false)]
        public double? PerformanceOneMonthMin { get; set; }

        /// <summary>
        /// The maximum stock price percentage change in the last month.
        /// </summary>
        /// <value>The maximum stock price percentage change in the last month.</value>
        [DataMember(Name="performanceOneMonthMax", EmitDefaultValue=false)]
        public double? PerformanceOneMonthMax { get; set; }

        /// <summary>
        /// The minimum stock price percentage change in the last three months.
        /// </summary>
        /// <value>The minimum stock price percentage change in the last three months.</value>
        [DataMember(Name="performanceThreeMonthsMin", EmitDefaultValue=false)]
        public double? PerformanceThreeMonthsMin { get; set; }

        /// <summary>
        /// The maximum stock price percentage change in the last three months.
        /// </summary>
        /// <value>The maximum stock price percentage change in the last three months.</value>
        [DataMember(Name="performanceThreeMonthsMax", EmitDefaultValue=false)]
        public double? PerformanceThreeMonthsMax { get; set; }

        /// <summary>
        /// The minimum stock price percentage change in the last year.
        /// </summary>
        /// <value>The minimum stock price percentage change in the last year.</value>
        [DataMember(Name="performanceOneYearMin", EmitDefaultValue=false)]
        public double? PerformanceOneYearMin { get; set; }

        /// <summary>
        /// The maximum stock price percentage change in the last year.
        /// </summary>
        /// <value>The maximum stock price percentage change in the last year.</value>
        [DataMember(Name="performanceOneYearMax", EmitDefaultValue=false)]
        public double? PerformanceOneYearMax { get; set; }

        /// <summary>
        /// The minimum stock price percentage change in the last three years.
        /// </summary>
        /// <value>The minimum stock price percentage change in the last three years.</value>
        [DataMember(Name="performanceThreeYearsMin", EmitDefaultValue=false)]
        public double? PerformanceThreeYearsMin { get; set; }

        /// <summary>
        /// The maximum stock price percentage change in the last three years.
        /// </summary>
        /// <value>The maximum stock price percentage change in the last three years.</value>
        [DataMember(Name="performanceThreeYearsMax", EmitDefaultValue=false)]
        public double? PerformanceThreeYearsMax { get; set; }

        /// <summary>
        /// The minimum stock price percentage change in the last five years.
        /// </summary>
        /// <value>The minimum stock price percentage change in the last five years.</value>
        [DataMember(Name="performanceFiveYearsMin", EmitDefaultValue=false)]
        public double? PerformanceFiveYearsMin { get; set; }

        /// <summary>
        /// The maximum stock price percentage change in the last five years.
        /// </summary>
        /// <value>The maximum stock price percentage change in the last five years.</value>
        [DataMember(Name="performanceFiveYearsMax", EmitDefaultValue=false)]
        public double? PerformanceFiveYearsMax { get; set; }

        /// <summary>
        /// The minimum stock price percentage change in the last ten years.
        /// </summary>
        /// <value>The minimum stock price percentage change in the last ten years.</value>
        [DataMember(Name="performanceTenYearsMin", EmitDefaultValue=false)]
        public double? PerformanceTenYearsMin { get; set; }

        /// <summary>
        /// The maximum stock price percentage change in the last ten years.
        /// </summary>
        /// <value>The maximum stock price percentage change in the last ten years.</value>
        [DataMember(Name="performanceTenYearsMax", EmitDefaultValue=false)]
        public double? PerformanceTenYearsMax { get; set; }

        /// <summary>
        /// The minimum stock price percentage change in the last twenty years.
        /// </summary>
        /// <value>The minimum stock price percentage change in the last twenty years.</value>
        [DataMember(Name="performanceTwentyYearsMin", EmitDefaultValue=false)]
        public double? PerformanceTwentyYearsMin { get; set; }

        /// <summary>
        /// The maximum stock price percentage change in the last twenty years.
        /// </summary>
        /// <value>The maximum stock price percentage change in the last twenty years.</value>
        [DataMember(Name="performanceTwentyYearsMax", EmitDefaultValue=false)]
        public double? PerformanceTwentyYearsMax { get; set; }

        /// <summary>
        /// The minimum EPS growth in the last year.
        /// </summary>
        /// <value>The minimum EPS growth in the last year.</value>
        [DataMember(Name="epsGrowthOneYearMin", EmitDefaultValue=false)]
        public double? EpsGrowthOneYearMin { get; set; }

        /// <summary>
        /// The maximum EPS growth in the last year.
        /// </summary>
        /// <value>The maximum EPS growth in the last year.</value>
        [DataMember(Name="epsGrowthOneYearMax", EmitDefaultValue=false)]
        public double? EpsGrowthOneYearMax { get; set; }

        /// <summary>
        /// The minimum EPS growth in the last two years. This value is annualized.
        /// </summary>
        /// <value>The minimum EPS growth in the last two years. This value is annualized.</value>
        [DataMember(Name="epsGrowthTwoYearsMin", EmitDefaultValue=false)]
        public double? EpsGrowthTwoYearsMin { get; set; }

        /// <summary>
        /// The maximum EPS growth in the last two years. This value is annualized.
        /// </summary>
        /// <value>The maximum EPS growth in the last two years. This value is annualized.</value>
        [DataMember(Name="epsGrowthTwoYearsMax", EmitDefaultValue=false)]
        public double? EpsGrowthTwoYearsMax { get; set; }

        /// <summary>
        /// The minimum EPS growth in the last three years. This value is annualized.
        /// </summary>
        /// <value>The minimum EPS growth in the last three years. This value is annualized.</value>
        [DataMember(Name="epsGrowthThreeYearsMin", EmitDefaultValue=false)]
        public double? EpsGrowthThreeYearsMin { get; set; }

        /// <summary>
        /// The maximum EPS growth in the last three years. This value is annualized.
        /// </summary>
        /// <value>The maximum EPS growth in the last three years. This value is annualized.</value>
        [DataMember(Name="epsGrowthThreeYearsMax", EmitDefaultValue=false)]
        public double? EpsGrowthThreeYearsMax { get; set; }

        /// <summary>
        /// The minimum EPS growth in the last five years. This value is annualized.
        /// </summary>
        /// <value>The minimum EPS growth in the last five years. This value is annualized.</value>
        [DataMember(Name="epsGrowthFiveYearsMin", EmitDefaultValue=false)]
        public double? EpsGrowthFiveYearsMin { get; set; }

        /// <summary>
        /// The maximum EPS growth in the last five years. This value is annualized.
        /// </summary>
        /// <value>The maximum EPS growth in the last five years. This value is annualized.</value>
        [DataMember(Name="epsGrowthFiveYearsMax", EmitDefaultValue=false)]
        public double? EpsGrowthFiveYearsMax { get; set; }

        /// <summary>
        /// The minimum EPS growth in the last ten years. This value is annualized.
        /// </summary>
        /// <value>The minimum EPS growth in the last ten years. This value is annualized.</value>
        [DataMember(Name="epsGrowthTenYearsMin", EmitDefaultValue=false)]
        public double? EpsGrowthTenYearsMin { get; set; }

        /// <summary>
        /// The maximum EPS growth in the last ten years. This value is annualized.
        /// </summary>
        /// <value>The maximum EPS growth in the last ten years. This value is annualized.</value>
        [DataMember(Name="epsGrowthTenYearsMax", EmitDefaultValue=false)]
        public double? EpsGrowthTenYearsMax { get; set; }

        /// <summary>
        /// The minimum EPS growth in the last twenty years. This value is annualized.
        /// </summary>
        /// <value>The minimum EPS growth in the last twenty years. This value is annualized.</value>
        [DataMember(Name="epsGrowthTwentyYearsMin", EmitDefaultValue=false)]
        public double? EpsGrowthTwentyYearsMin { get; set; }

        /// <summary>
        /// The maximum EPS growth in the last twenty years. This value is annualized.
        /// </summary>
        /// <value>The maximum EPS growth in the last twenty years. This value is annualized.</value>
        [DataMember(Name="epsGrowthTwentyYearsMax", EmitDefaultValue=false)]
        public double? EpsGrowthTwentyYearsMax { get; set; }

        /// <summary>
        /// The minimum price to earnings value.
        /// </summary>
        /// <value>The minimum price to earnings value.</value>
        [DataMember(Name="peMin", EmitDefaultValue=false)]
        public double? PeMin { get; set; }

        /// <summary>
        /// The maximum price to earnings value.
        /// </summary>
        /// <value>The maximum price to earnings value.</value>
        [DataMember(Name="peMax", EmitDefaultValue=false)]
        public double? PeMax { get; set; }

        /// <summary>
        /// The minimum price to earnings to growth value.
        /// </summary>
        /// <value>The minimum price to earnings to growth value.</value>
        [DataMember(Name="pegMin", EmitDefaultValue=false)]
        public double? PegMin { get; set; }

        /// <summary>
        /// The maximum price to earnings to growth value.
        /// </summary>
        /// <value>The maximum price to earnings to growth value.</value>
        [DataMember(Name="pegMax", EmitDefaultValue=false)]
        public double? PegMax { get; set; }

        /// <summary>
        /// The minimum price to free cash flow value.
        /// </summary>
        /// <value>The minimum price to free cash flow value.</value>
        [DataMember(Name="priceFcfMin", EmitDefaultValue=false)]
        public double? PriceFcfMin { get; set; }

        /// <summary>
        /// The maximum price to free cash flow value.
        /// </summary>
        /// <value>The maximum price to free cash flow value.</value>
        [DataMember(Name="priceFcfMax", EmitDefaultValue=false)]
        public double? PriceFcfMax { get; set; }

        /// <summary>
        /// The minimum book value per share.
        /// </summary>
        /// <value>The minimum book value per share.</value>
        [DataMember(Name="bookValuePerShareMin", EmitDefaultValue=false)]
        public double? BookValuePerShareMin { get; set; }

        /// <summary>
        /// The maximum book value per share.
        /// </summary>
        /// <value>The maximum book value per share.</value>
        [DataMember(Name="bookValuePerShareMax", EmitDefaultValue=false)]
        public double? BookValuePerShareMax { get; set; }

        /// <summary>
        /// The minimum price to book value.
        /// </summary>
        /// <value>The minimum price to book value.</value>
        [DataMember(Name="priceBookValuePerShareMin", EmitDefaultValue=false)]
        public double? PriceBookValuePerShareMin { get; set; }

        /// <summary>
        /// The maximum price to book value.
        /// </summary>
        /// <value>The maximum price to book value.</value>
        [DataMember(Name="priceBookValuePerShareMax", EmitDefaultValue=false)]
        public double? PriceBookValuePerShareMax { get; set; }

        /// <summary>
        /// The minimum payout ratio (as percentage).
        /// </summary>
        /// <value>The minimum payout ratio (as percentage).</value>
        [DataMember(Name="payoutMin", EmitDefaultValue=false)]
        public double? PayoutMin { get; set; }

        /// <summary>
        /// The maximum payout ratio (as percentage).
        /// </summary>
        /// <value>The maximum payout ratio (as percentage).</value>
        [DataMember(Name="payoutMax", EmitDefaultValue=false)]
        public double? PayoutMax { get; set; }

        /// <summary>
        /// The minimum debt to equity ratio (as percentage).
        /// </summary>
        /// <value>The minimum debt to equity ratio (as percentage).</value>
        [DataMember(Name="debtToEquityMin", EmitDefaultValue=false)]
        public double? DebtToEquityMin { get; set; }

        /// <summary>
        /// The maximum debt to equity ratio (as percentage).
        /// </summary>
        /// <value>The maximum debt to equity ratio (as percentage).</value>
        [DataMember(Name="debtToEquityMax", EmitDefaultValue=false)]
        public double? DebtToEquityMax { get; set; }

        /// <summary>
        /// The minimum gross margin (as percentage).
        /// </summary>
        /// <value>The minimum gross margin (as percentage).</value>
        [DataMember(Name="grossMarginMin", EmitDefaultValue=false)]
        public double? GrossMarginMin { get; set; }

        /// <summary>
        /// The maximum gross margin (as percentage).
        /// </summary>
        /// <value>The maximum gross margin (as percentage).</value>
        [DataMember(Name="grossMarginMax", EmitDefaultValue=false)]
        public double? GrossMarginMax { get; set; }

        /// <summary>
        /// The minimum operating margin (as percentage).
        /// </summary>
        /// <value>The minimum operating margin (as percentage).</value>
        [DataMember(Name="operatingMarginMin", EmitDefaultValue=false)]
        public double? OperatingMarginMin { get; set; }

        /// <summary>
        /// The maximum operating margin (as percentage).
        /// </summary>
        /// <value>The maximum operating margin (as percentage).</value>
        [DataMember(Name="operatingMarginMax", EmitDefaultValue=false)]
        public double? OperatingMarginMax { get; set; }

        /// <summary>
        /// The minimum profit margin (as percentage).
        /// </summary>
        /// <value>The minimum profit margin (as percentage).</value>
        [DataMember(Name="profitMarginMin", EmitDefaultValue=false)]
        public double? ProfitMarginMin { get; set; }

        /// <summary>
        /// The maximum profit margin (as percentage).
        /// </summary>
        /// <value>The maximum profit margin (as percentage).</value>
        [DataMember(Name="profitMarginMax", EmitDefaultValue=false)]
        public double? ProfitMarginMax { get; set; }

        /// <summary>
        /// The minimum price to sales ratio.
        /// </summary>
        /// <value>The minimum price to sales ratio.</value>
        [DataMember(Name="priceToSalesMin", EmitDefaultValue=false)]
        public double? PriceToSalesMin { get; set; }

        /// <summary>
        /// The maximum price to sales ratio.
        /// </summary>
        /// <value>The maximum price to sales ratio.</value>
        [DataMember(Name="priceToSalesMax", EmitDefaultValue=false)]
        public double? PriceToSalesMax { get; set; }

        /// <summary>
        /// The minimum percentage of shares bought back in the last 3 months. Negative values represent dilution of shares.
        /// </summary>
        /// <value>The minimum percentage of shares bought back in the last 3 months. Negative values represent dilution of shares.</value>
        [DataMember(Name="buybacksThreeMonthsMin", EmitDefaultValue=false)]
        public double? BuybacksThreeMonthsMin { get; set; }

        /// <summary>
        /// The maximum percentage of shares bought back in the last 3 months. Negative values represent dilution of shares.
        /// </summary>
        /// <value>The maximum percentage of shares bought back in the last 3 months. Negative values represent dilution of shares.</value>
        [DataMember(Name="buybacksThreeMonthsMax", EmitDefaultValue=false)]
        public double? BuybacksThreeMonthsMax { get; set; }

        /// <summary>
        /// The minimum percentage of shares bought back in the last 6 months. Negative values represent dilution of shares.
        /// </summary>
        /// <value>The minimum percentage of shares bought back in the last 6 months. Negative values represent dilution of shares.</value>
        [DataMember(Name="buybacksSixMonthsMin", EmitDefaultValue=false)]
        public double? BuybacksSixMonthsMin { get; set; }

        /// <summary>
        /// Gets or Sets BuybacksSixMonthsMax
        /// </summary>
        [DataMember(Name="buybacksSixMonthsMax", EmitDefaultValue=false)]
        public double? BuybacksSixMonthsMax { get; set; }

        /// <summary>
        /// The minimum percentage of shares bought back in the last year. Negative values represent dilution of shares.
        /// </summary>
        /// <value>The minimum percentage of shares bought back in the last year. Negative values represent dilution of shares.</value>
        [DataMember(Name="buybacksOneYearMin", EmitDefaultValue=false)]
        public double? BuybacksOneYearMin { get; set; }

        /// <summary>
        /// The maximum percentage of shares bought back in the last year. Negative values represent dilution of shares.
        /// </summary>
        /// <value>The maximum percentage of shares bought back in the last year. Negative values represent dilution of shares.</value>
        [DataMember(Name="buybacksOneYearMax", EmitDefaultValue=false)]
        public double? BuybacksOneYearMax { get; set; }

        /// <summary>
        /// The minimum percentage of shares bought back in the last 2 years. Negative values represent dilution of shares.
        /// </summary>
        /// <value>The minimum percentage of shares bought back in the last 2 years. Negative values represent dilution of shares.</value>
        [DataMember(Name="buybacksTwoYearsMin", EmitDefaultValue=false)]
        public double? BuybacksTwoYearsMin { get; set; }

        /// <summary>
        /// The maximum percentage of shares bought back in the last 2 years. Negative values represent dilution of shares.
        /// </summary>
        /// <value>The maximum percentage of shares bought back in the last 2 years. Negative values represent dilution of shares.</value>
        [DataMember(Name="buybacksTwoYearsMax", EmitDefaultValue=false)]
        public double? BuybacksTwoYearsMax { get; set; }

        /// <summary>
        /// The minimum percentage of shares bought back in the last 3 years. Negative values represent dilution of shares.
        /// </summary>
        /// <value>The minimum percentage of shares bought back in the last 3 years. Negative values represent dilution of shares.</value>
        [DataMember(Name="buybacksThreeYearsMin", EmitDefaultValue=false)]
        public double? BuybacksThreeYearsMin { get; set; }

        /// <summary>
        /// The maximum percentage of shares bought back in the last 3 years. Negative values represent dilution of shares.
        /// </summary>
        /// <value>The maximum percentage of shares bought back in the last 3 years. Negative values represent dilution of shares.</value>
        [DataMember(Name="buybacksThreeYearsMax", EmitDefaultValue=false)]
        public double? BuybacksThreeYearsMax { get; set; }

        /// <summary>
        /// The minimum percentage of shares bought back in the last 5 years. Negative values represent dilution of shares.
        /// </summary>
        /// <value>The minimum percentage of shares bought back in the last 5 years. Negative values represent dilution of shares.</value>
        [DataMember(Name="buybacksFiveYearsMin", EmitDefaultValue=false)]
        public double? BuybacksFiveYearsMin { get; set; }

        /// <summary>
        /// The maximum percentage of shares bought back in the last 5 years. Negative values represent dilution of shares.
        /// </summary>
        /// <value>The maximum percentage of shares bought back in the last 5 years. Negative values represent dilution of shares.</value>
        [DataMember(Name="buybacksFiveYearsMax", EmitDefaultValue=false)]
        public double? BuybacksFiveYearsMax { get; set; }

        /// <summary>
        /// The minimum percentage of shares bought back in the last 10 years. Negative values represent dilution of shares.
        /// </summary>
        /// <value>The minimum percentage of shares bought back in the last 10 years. Negative values represent dilution of shares.</value>
        [DataMember(Name="buybacksTenYearsMin", EmitDefaultValue=false)]
        public double? BuybacksTenYearsMin { get; set; }

        /// <summary>
        /// The maximum percentage of shares bought back in the last 10 years. Negative values represent dilution of shares.
        /// </summary>
        /// <value>The maximum percentage of shares bought back in the last 10 years. Negative values represent dilution of shares.</value>
        [DataMember(Name="buybacksTenYearsMax", EmitDefaultValue=false)]
        public double? BuybacksTenYearsMax { get; set; }

        /// <summary>
        /// The minimum percentage of shares bought back in the last 20 years. Negative values represent dilution of shares.
        /// </summary>
        /// <value>The minimum percentage of shares bought back in the last 20 years. Negative values represent dilution of shares.</value>
        [DataMember(Name="buybacksTwentyYearsMin", EmitDefaultValue=false)]
        public double? BuybacksTwentyYearsMin { get; set; }

        /// <summary>
        /// The maximum percentage of shares bought back in the last 20 years. Negative values represent dilution of shares.
        /// </summary>
        /// <value>The maximum percentage of shares bought back in the last 20 years. Negative values represent dilution of shares.</value>
        [DataMember(Name="buybacksTwentyYearsMax", EmitDefaultValue=false)]
        public double? BuybacksTwentyYearsMax { get; set; }

        /// <summary>
        /// The upside potential according to the analysts&#x27; target price consensus (as percentage). I.e. If the stock price is $100 and the analysts&#x27; target price consensus is $150 then the potential upside is 50%.
        /// </summary>
        /// <value>The upside potential according to the analysts&#x27; target price consensus (as percentage). I.e. If the stock price is $100 and the analysts&#x27; target price consensus is $150 then the potential upside is 50%.</value>
        [DataMember(Name="potentialUpside", EmitDefaultValue=false)]
        public double? PotentialUpside { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ScreenerRequest {\n");
            sb.Append("  SearchQuery: ").Append(SearchQuery).Append("\n");
            sb.Append("  ExchangeIds: ").Append(ExchangeIds).Append("\n");
            sb.Append("  SectorIds: ").Append(SectorIds).Append("\n");
            sb.Append("  IndustryIds: ").Append(IndustryIds).Append("\n");
            sb.Append("  MarketCapMin: ").Append(MarketCapMin).Append("\n");
            sb.Append("  MarketCapMax: ").Append(MarketCapMax).Append("\n");
            sb.Append("  BetaMin: ").Append(BetaMin).Append("\n");
            sb.Append("  BetaMax: ").Append(BetaMax).Append("\n");
            sb.Append("  ForwardDividendMin: ").Append(ForwardDividendMin).Append("\n");
            sb.Append("  ForwardDividendMax: ").Append(ForwardDividendMax).Append("\n");
            sb.Append("  ForwardDividendYieldMin: ").Append(ForwardDividendYieldMin).Append("\n");
            sb.Append("  ForwardDividendYieldMax: ").Append(ForwardDividendYieldMax).Append("\n");
            sb.Append("  ShortRatioMin: ").Append(ShortRatioMin).Append("\n");
            sb.Append("  ShortRatioMax: ").Append(ShortRatioMax).Append("\n");
            sb.Append("  SharesShortPercentageMin: ").Append(SharesShortPercentageMin).Append("\n");
            sb.Append("  SharesShortPercentageMax: ").Append(SharesShortPercentageMax).Append("\n");
            sb.Append("  SharesShortPreviousMonthPercentageMin: ").Append(SharesShortPreviousMonthPercentageMin).Append("\n");
            sb.Append("  SharesShortPreviousMonthPercentageMax: ").Append(SharesShortPreviousMonthPercentageMax).Append("\n");
            sb.Append("  AnalystRecommendationMin: ").Append(AnalystRecommendationMin).Append("\n");
            sb.Append("  AnalystRecommendationMax: ").Append(AnalystRecommendationMax).Append("\n");
            sb.Append("  PerformanceOneDayMin: ").Append(PerformanceOneDayMin).Append("\n");
            sb.Append("  PerformanceOneDayMax: ").Append(PerformanceOneDayMax).Append("\n");
            sb.Append("  PerformanceOneWeekMin: ").Append(PerformanceOneWeekMin).Append("\n");
            sb.Append("  PerformanceOneWeekMax: ").Append(PerformanceOneWeekMax).Append("\n");
            sb.Append("  PerformanceTwoWeeksMin: ").Append(PerformanceTwoWeeksMin).Append("\n");
            sb.Append("  PerformanceTwoWeeksMax: ").Append(PerformanceTwoWeeksMax).Append("\n");
            sb.Append("  PerformanceOneMonthMin: ").Append(PerformanceOneMonthMin).Append("\n");
            sb.Append("  PerformanceOneMonthMax: ").Append(PerformanceOneMonthMax).Append("\n");
            sb.Append("  PerformanceThreeMonthsMin: ").Append(PerformanceThreeMonthsMin).Append("\n");
            sb.Append("  PerformanceThreeMonthsMax: ").Append(PerformanceThreeMonthsMax).Append("\n");
            sb.Append("  PerformanceOneYearMin: ").Append(PerformanceOneYearMin).Append("\n");
            sb.Append("  PerformanceOneYearMax: ").Append(PerformanceOneYearMax).Append("\n");
            sb.Append("  PerformanceThreeYearsMin: ").Append(PerformanceThreeYearsMin).Append("\n");
            sb.Append("  PerformanceThreeYearsMax: ").Append(PerformanceThreeYearsMax).Append("\n");
            sb.Append("  PerformanceFiveYearsMin: ").Append(PerformanceFiveYearsMin).Append("\n");
            sb.Append("  PerformanceFiveYearsMax: ").Append(PerformanceFiveYearsMax).Append("\n");
            sb.Append("  PerformanceTenYearsMin: ").Append(PerformanceTenYearsMin).Append("\n");
            sb.Append("  PerformanceTenYearsMax: ").Append(PerformanceTenYearsMax).Append("\n");
            sb.Append("  PerformanceTwentyYearsMin: ").Append(PerformanceTwentyYearsMin).Append("\n");
            sb.Append("  PerformanceTwentyYearsMax: ").Append(PerformanceTwentyYearsMax).Append("\n");
            sb.Append("  EpsGrowthOneYearMin: ").Append(EpsGrowthOneYearMin).Append("\n");
            sb.Append("  EpsGrowthOneYearMax: ").Append(EpsGrowthOneYearMax).Append("\n");
            sb.Append("  EpsGrowthTwoYearsMin: ").Append(EpsGrowthTwoYearsMin).Append("\n");
            sb.Append("  EpsGrowthTwoYearsMax: ").Append(EpsGrowthTwoYearsMax).Append("\n");
            sb.Append("  EpsGrowthThreeYearsMin: ").Append(EpsGrowthThreeYearsMin).Append("\n");
            sb.Append("  EpsGrowthThreeYearsMax: ").Append(EpsGrowthThreeYearsMax).Append("\n");
            sb.Append("  EpsGrowthFiveYearsMin: ").Append(EpsGrowthFiveYearsMin).Append("\n");
            sb.Append("  EpsGrowthFiveYearsMax: ").Append(EpsGrowthFiveYearsMax).Append("\n");
            sb.Append("  EpsGrowthTenYearsMin: ").Append(EpsGrowthTenYearsMin).Append("\n");
            sb.Append("  EpsGrowthTenYearsMax: ").Append(EpsGrowthTenYearsMax).Append("\n");
            sb.Append("  EpsGrowthTwentyYearsMin: ").Append(EpsGrowthTwentyYearsMin).Append("\n");
            sb.Append("  EpsGrowthTwentyYearsMax: ").Append(EpsGrowthTwentyYearsMax).Append("\n");
            sb.Append("  PeMin: ").Append(PeMin).Append("\n");
            sb.Append("  PeMax: ").Append(PeMax).Append("\n");
            sb.Append("  PegMin: ").Append(PegMin).Append("\n");
            sb.Append("  PegMax: ").Append(PegMax).Append("\n");
            sb.Append("  PriceFcfMin: ").Append(PriceFcfMin).Append("\n");
            sb.Append("  PriceFcfMax: ").Append(PriceFcfMax).Append("\n");
            sb.Append("  BookValuePerShareMin: ").Append(BookValuePerShareMin).Append("\n");
            sb.Append("  BookValuePerShareMax: ").Append(BookValuePerShareMax).Append("\n");
            sb.Append("  PriceBookValuePerShareMin: ").Append(PriceBookValuePerShareMin).Append("\n");
            sb.Append("  PriceBookValuePerShareMax: ").Append(PriceBookValuePerShareMax).Append("\n");
            sb.Append("  PayoutMin: ").Append(PayoutMin).Append("\n");
            sb.Append("  PayoutMax: ").Append(PayoutMax).Append("\n");
            sb.Append("  DebtToEquityMin: ").Append(DebtToEquityMin).Append("\n");
            sb.Append("  DebtToEquityMax: ").Append(DebtToEquityMax).Append("\n");
            sb.Append("  GrossMarginMin: ").Append(GrossMarginMin).Append("\n");
            sb.Append("  GrossMarginMax: ").Append(GrossMarginMax).Append("\n");
            sb.Append("  OperatingMarginMin: ").Append(OperatingMarginMin).Append("\n");
            sb.Append("  OperatingMarginMax: ").Append(OperatingMarginMax).Append("\n");
            sb.Append("  ProfitMarginMin: ").Append(ProfitMarginMin).Append("\n");
            sb.Append("  ProfitMarginMax: ").Append(ProfitMarginMax).Append("\n");
            sb.Append("  PriceToSalesMin: ").Append(PriceToSalesMin).Append("\n");
            sb.Append("  PriceToSalesMax: ").Append(PriceToSalesMax).Append("\n");
            sb.Append("  BuybacksThreeMonthsMin: ").Append(BuybacksThreeMonthsMin).Append("\n");
            sb.Append("  BuybacksThreeMonthsMax: ").Append(BuybacksThreeMonthsMax).Append("\n");
            sb.Append("  BuybacksSixMonthsMin: ").Append(BuybacksSixMonthsMin).Append("\n");
            sb.Append("  BuybacksSixMonthsMax: ").Append(BuybacksSixMonthsMax).Append("\n");
            sb.Append("  BuybacksOneYearMin: ").Append(BuybacksOneYearMin).Append("\n");
            sb.Append("  BuybacksOneYearMax: ").Append(BuybacksOneYearMax).Append("\n");
            sb.Append("  BuybacksTwoYearsMin: ").Append(BuybacksTwoYearsMin).Append("\n");
            sb.Append("  BuybacksTwoYearsMax: ").Append(BuybacksTwoYearsMax).Append("\n");
            sb.Append("  BuybacksThreeYearsMin: ").Append(BuybacksThreeYearsMin).Append("\n");
            sb.Append("  BuybacksThreeYearsMax: ").Append(BuybacksThreeYearsMax).Append("\n");
            sb.Append("  BuybacksFiveYearsMin: ").Append(BuybacksFiveYearsMin).Append("\n");
            sb.Append("  BuybacksFiveYearsMax: ").Append(BuybacksFiveYearsMax).Append("\n");
            sb.Append("  BuybacksTenYearsMin: ").Append(BuybacksTenYearsMin).Append("\n");
            sb.Append("  BuybacksTenYearsMax: ").Append(BuybacksTenYearsMax).Append("\n");
            sb.Append("  BuybacksTwentyYearsMin: ").Append(BuybacksTwentyYearsMin).Append("\n");
            sb.Append("  BuybacksTwentyYearsMax: ").Append(BuybacksTwentyYearsMax).Append("\n");
            sb.Append("  PotentialUpside: ").Append(PotentialUpside).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ScreenerRequest);
        }

        /// <summary>
        /// Returns true if ScreenerRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ScreenerRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScreenerRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SearchQuery == input.SearchQuery ||
                    (this.SearchQuery != null &&
                    this.SearchQuery.Equals(input.SearchQuery))
                ) && 
                (
                    this.ExchangeIds == input.ExchangeIds ||
                    this.ExchangeIds != null &&
                    input.ExchangeIds != null &&
                    this.ExchangeIds.SequenceEqual(input.ExchangeIds)
                ) && 
                (
                    this.SectorIds == input.SectorIds ||
                    this.SectorIds != null &&
                    input.SectorIds != null &&
                    this.SectorIds.SequenceEqual(input.SectorIds)
                ) && 
                (
                    this.IndustryIds == input.IndustryIds ||
                    this.IndustryIds != null &&
                    input.IndustryIds != null &&
                    this.IndustryIds.SequenceEqual(input.IndustryIds)
                ) && 
                (
                    this.MarketCapMin == input.MarketCapMin ||
                    (this.MarketCapMin != null &&
                    this.MarketCapMin.Equals(input.MarketCapMin))
                ) && 
                (
                    this.MarketCapMax == input.MarketCapMax ||
                    (this.MarketCapMax != null &&
                    this.MarketCapMax.Equals(input.MarketCapMax))
                ) && 
                (
                    this.BetaMin == input.BetaMin ||
                    (this.BetaMin != null &&
                    this.BetaMin.Equals(input.BetaMin))
                ) && 
                (
                    this.BetaMax == input.BetaMax ||
                    (this.BetaMax != null &&
                    this.BetaMax.Equals(input.BetaMax))
                ) && 
                (
                    this.ForwardDividendMin == input.ForwardDividendMin ||
                    (this.ForwardDividendMin != null &&
                    this.ForwardDividendMin.Equals(input.ForwardDividendMin))
                ) && 
                (
                    this.ForwardDividendMax == input.ForwardDividendMax ||
                    (this.ForwardDividendMax != null &&
                    this.ForwardDividendMax.Equals(input.ForwardDividendMax))
                ) && 
                (
                    this.ForwardDividendYieldMin == input.ForwardDividendYieldMin ||
                    (this.ForwardDividendYieldMin != null &&
                    this.ForwardDividendYieldMin.Equals(input.ForwardDividendYieldMin))
                ) && 
                (
                    this.ForwardDividendYieldMax == input.ForwardDividendYieldMax ||
                    (this.ForwardDividendYieldMax != null &&
                    this.ForwardDividendYieldMax.Equals(input.ForwardDividendYieldMax))
                ) && 
                (
                    this.ShortRatioMin == input.ShortRatioMin ||
                    (this.ShortRatioMin != null &&
                    this.ShortRatioMin.Equals(input.ShortRatioMin))
                ) && 
                (
                    this.ShortRatioMax == input.ShortRatioMax ||
                    (this.ShortRatioMax != null &&
                    this.ShortRatioMax.Equals(input.ShortRatioMax))
                ) && 
                (
                    this.SharesShortPercentageMin == input.SharesShortPercentageMin ||
                    (this.SharesShortPercentageMin != null &&
                    this.SharesShortPercentageMin.Equals(input.SharesShortPercentageMin))
                ) && 
                (
                    this.SharesShortPercentageMax == input.SharesShortPercentageMax ||
                    (this.SharesShortPercentageMax != null &&
                    this.SharesShortPercentageMax.Equals(input.SharesShortPercentageMax))
                ) && 
                (
                    this.SharesShortPreviousMonthPercentageMin == input.SharesShortPreviousMonthPercentageMin ||
                    (this.SharesShortPreviousMonthPercentageMin != null &&
                    this.SharesShortPreviousMonthPercentageMin.Equals(input.SharesShortPreviousMonthPercentageMin))
                ) && 
                (
                    this.SharesShortPreviousMonthPercentageMax == input.SharesShortPreviousMonthPercentageMax ||
                    (this.SharesShortPreviousMonthPercentageMax != null &&
                    this.SharesShortPreviousMonthPercentageMax.Equals(input.SharesShortPreviousMonthPercentageMax))
                ) && 
                (
                    this.AnalystRecommendationMin == input.AnalystRecommendationMin ||
                    (this.AnalystRecommendationMin != null &&
                    this.AnalystRecommendationMin.Equals(input.AnalystRecommendationMin))
                ) && 
                (
                    this.AnalystRecommendationMax == input.AnalystRecommendationMax ||
                    (this.AnalystRecommendationMax != null &&
                    this.AnalystRecommendationMax.Equals(input.AnalystRecommendationMax))
                ) && 
                (
                    this.PerformanceOneDayMin == input.PerformanceOneDayMin ||
                    (this.PerformanceOneDayMin != null &&
                    this.PerformanceOneDayMin.Equals(input.PerformanceOneDayMin))
                ) && 
                (
                    this.PerformanceOneDayMax == input.PerformanceOneDayMax ||
                    (this.PerformanceOneDayMax != null &&
                    this.PerformanceOneDayMax.Equals(input.PerformanceOneDayMax))
                ) && 
                (
                    this.PerformanceOneWeekMin == input.PerformanceOneWeekMin ||
                    (this.PerformanceOneWeekMin != null &&
                    this.PerformanceOneWeekMin.Equals(input.PerformanceOneWeekMin))
                ) && 
                (
                    this.PerformanceOneWeekMax == input.PerformanceOneWeekMax ||
                    (this.PerformanceOneWeekMax != null &&
                    this.PerformanceOneWeekMax.Equals(input.PerformanceOneWeekMax))
                ) && 
                (
                    this.PerformanceTwoWeeksMin == input.PerformanceTwoWeeksMin ||
                    (this.PerformanceTwoWeeksMin != null &&
                    this.PerformanceTwoWeeksMin.Equals(input.PerformanceTwoWeeksMin))
                ) && 
                (
                    this.PerformanceTwoWeeksMax == input.PerformanceTwoWeeksMax ||
                    (this.PerformanceTwoWeeksMax != null &&
                    this.PerformanceTwoWeeksMax.Equals(input.PerformanceTwoWeeksMax))
                ) && 
                (
                    this.PerformanceOneMonthMin == input.PerformanceOneMonthMin ||
                    (this.PerformanceOneMonthMin != null &&
                    this.PerformanceOneMonthMin.Equals(input.PerformanceOneMonthMin))
                ) && 
                (
                    this.PerformanceOneMonthMax == input.PerformanceOneMonthMax ||
                    (this.PerformanceOneMonthMax != null &&
                    this.PerformanceOneMonthMax.Equals(input.PerformanceOneMonthMax))
                ) && 
                (
                    this.PerformanceThreeMonthsMin == input.PerformanceThreeMonthsMin ||
                    (this.PerformanceThreeMonthsMin != null &&
                    this.PerformanceThreeMonthsMin.Equals(input.PerformanceThreeMonthsMin))
                ) && 
                (
                    this.PerformanceThreeMonthsMax == input.PerformanceThreeMonthsMax ||
                    (this.PerformanceThreeMonthsMax != null &&
                    this.PerformanceThreeMonthsMax.Equals(input.PerformanceThreeMonthsMax))
                ) && 
                (
                    this.PerformanceOneYearMin == input.PerformanceOneYearMin ||
                    (this.PerformanceOneYearMin != null &&
                    this.PerformanceOneYearMin.Equals(input.PerformanceOneYearMin))
                ) && 
                (
                    this.PerformanceOneYearMax == input.PerformanceOneYearMax ||
                    (this.PerformanceOneYearMax != null &&
                    this.PerformanceOneYearMax.Equals(input.PerformanceOneYearMax))
                ) && 
                (
                    this.PerformanceThreeYearsMin == input.PerformanceThreeYearsMin ||
                    (this.PerformanceThreeYearsMin != null &&
                    this.PerformanceThreeYearsMin.Equals(input.PerformanceThreeYearsMin))
                ) && 
                (
                    this.PerformanceThreeYearsMax == input.PerformanceThreeYearsMax ||
                    (this.PerformanceThreeYearsMax != null &&
                    this.PerformanceThreeYearsMax.Equals(input.PerformanceThreeYearsMax))
                ) && 
                (
                    this.PerformanceFiveYearsMin == input.PerformanceFiveYearsMin ||
                    (this.PerformanceFiveYearsMin != null &&
                    this.PerformanceFiveYearsMin.Equals(input.PerformanceFiveYearsMin))
                ) && 
                (
                    this.PerformanceFiveYearsMax == input.PerformanceFiveYearsMax ||
                    (this.PerformanceFiveYearsMax != null &&
                    this.PerformanceFiveYearsMax.Equals(input.PerformanceFiveYearsMax))
                ) && 
                (
                    this.PerformanceTenYearsMin == input.PerformanceTenYearsMin ||
                    (this.PerformanceTenYearsMin != null &&
                    this.PerformanceTenYearsMin.Equals(input.PerformanceTenYearsMin))
                ) && 
                (
                    this.PerformanceTenYearsMax == input.PerformanceTenYearsMax ||
                    (this.PerformanceTenYearsMax != null &&
                    this.PerformanceTenYearsMax.Equals(input.PerformanceTenYearsMax))
                ) && 
                (
                    this.PerformanceTwentyYearsMin == input.PerformanceTwentyYearsMin ||
                    (this.PerformanceTwentyYearsMin != null &&
                    this.PerformanceTwentyYearsMin.Equals(input.PerformanceTwentyYearsMin))
                ) && 
                (
                    this.PerformanceTwentyYearsMax == input.PerformanceTwentyYearsMax ||
                    (this.PerformanceTwentyYearsMax != null &&
                    this.PerformanceTwentyYearsMax.Equals(input.PerformanceTwentyYearsMax))
                ) && 
                (
                    this.EpsGrowthOneYearMin == input.EpsGrowthOneYearMin ||
                    (this.EpsGrowthOneYearMin != null &&
                    this.EpsGrowthOneYearMin.Equals(input.EpsGrowthOneYearMin))
                ) && 
                (
                    this.EpsGrowthOneYearMax == input.EpsGrowthOneYearMax ||
                    (this.EpsGrowthOneYearMax != null &&
                    this.EpsGrowthOneYearMax.Equals(input.EpsGrowthOneYearMax))
                ) && 
                (
                    this.EpsGrowthTwoYearsMin == input.EpsGrowthTwoYearsMin ||
                    (this.EpsGrowthTwoYearsMin != null &&
                    this.EpsGrowthTwoYearsMin.Equals(input.EpsGrowthTwoYearsMin))
                ) && 
                (
                    this.EpsGrowthTwoYearsMax == input.EpsGrowthTwoYearsMax ||
                    (this.EpsGrowthTwoYearsMax != null &&
                    this.EpsGrowthTwoYearsMax.Equals(input.EpsGrowthTwoYearsMax))
                ) && 
                (
                    this.EpsGrowthThreeYearsMin == input.EpsGrowthThreeYearsMin ||
                    (this.EpsGrowthThreeYearsMin != null &&
                    this.EpsGrowthThreeYearsMin.Equals(input.EpsGrowthThreeYearsMin))
                ) && 
                (
                    this.EpsGrowthThreeYearsMax == input.EpsGrowthThreeYearsMax ||
                    (this.EpsGrowthThreeYearsMax != null &&
                    this.EpsGrowthThreeYearsMax.Equals(input.EpsGrowthThreeYearsMax))
                ) && 
                (
                    this.EpsGrowthFiveYearsMin == input.EpsGrowthFiveYearsMin ||
                    (this.EpsGrowthFiveYearsMin != null &&
                    this.EpsGrowthFiveYearsMin.Equals(input.EpsGrowthFiveYearsMin))
                ) && 
                (
                    this.EpsGrowthFiveYearsMax == input.EpsGrowthFiveYearsMax ||
                    (this.EpsGrowthFiveYearsMax != null &&
                    this.EpsGrowthFiveYearsMax.Equals(input.EpsGrowthFiveYearsMax))
                ) && 
                (
                    this.EpsGrowthTenYearsMin == input.EpsGrowthTenYearsMin ||
                    (this.EpsGrowthTenYearsMin != null &&
                    this.EpsGrowthTenYearsMin.Equals(input.EpsGrowthTenYearsMin))
                ) && 
                (
                    this.EpsGrowthTenYearsMax == input.EpsGrowthTenYearsMax ||
                    (this.EpsGrowthTenYearsMax != null &&
                    this.EpsGrowthTenYearsMax.Equals(input.EpsGrowthTenYearsMax))
                ) && 
                (
                    this.EpsGrowthTwentyYearsMin == input.EpsGrowthTwentyYearsMin ||
                    (this.EpsGrowthTwentyYearsMin != null &&
                    this.EpsGrowthTwentyYearsMin.Equals(input.EpsGrowthTwentyYearsMin))
                ) && 
                (
                    this.EpsGrowthTwentyYearsMax == input.EpsGrowthTwentyYearsMax ||
                    (this.EpsGrowthTwentyYearsMax != null &&
                    this.EpsGrowthTwentyYearsMax.Equals(input.EpsGrowthTwentyYearsMax))
                ) && 
                (
                    this.PeMin == input.PeMin ||
                    (this.PeMin != null &&
                    this.PeMin.Equals(input.PeMin))
                ) && 
                (
                    this.PeMax == input.PeMax ||
                    (this.PeMax != null &&
                    this.PeMax.Equals(input.PeMax))
                ) && 
                (
                    this.PegMin == input.PegMin ||
                    (this.PegMin != null &&
                    this.PegMin.Equals(input.PegMin))
                ) && 
                (
                    this.PegMax == input.PegMax ||
                    (this.PegMax != null &&
                    this.PegMax.Equals(input.PegMax))
                ) && 
                (
                    this.PriceFcfMin == input.PriceFcfMin ||
                    (this.PriceFcfMin != null &&
                    this.PriceFcfMin.Equals(input.PriceFcfMin))
                ) && 
                (
                    this.PriceFcfMax == input.PriceFcfMax ||
                    (this.PriceFcfMax != null &&
                    this.PriceFcfMax.Equals(input.PriceFcfMax))
                ) && 
                (
                    this.BookValuePerShareMin == input.BookValuePerShareMin ||
                    (this.BookValuePerShareMin != null &&
                    this.BookValuePerShareMin.Equals(input.BookValuePerShareMin))
                ) && 
                (
                    this.BookValuePerShareMax == input.BookValuePerShareMax ||
                    (this.BookValuePerShareMax != null &&
                    this.BookValuePerShareMax.Equals(input.BookValuePerShareMax))
                ) && 
                (
                    this.PriceBookValuePerShareMin == input.PriceBookValuePerShareMin ||
                    (this.PriceBookValuePerShareMin != null &&
                    this.PriceBookValuePerShareMin.Equals(input.PriceBookValuePerShareMin))
                ) && 
                (
                    this.PriceBookValuePerShareMax == input.PriceBookValuePerShareMax ||
                    (this.PriceBookValuePerShareMax != null &&
                    this.PriceBookValuePerShareMax.Equals(input.PriceBookValuePerShareMax))
                ) && 
                (
                    this.PayoutMin == input.PayoutMin ||
                    (this.PayoutMin != null &&
                    this.PayoutMin.Equals(input.PayoutMin))
                ) && 
                (
                    this.PayoutMax == input.PayoutMax ||
                    (this.PayoutMax != null &&
                    this.PayoutMax.Equals(input.PayoutMax))
                ) && 
                (
                    this.DebtToEquityMin == input.DebtToEquityMin ||
                    (this.DebtToEquityMin != null &&
                    this.DebtToEquityMin.Equals(input.DebtToEquityMin))
                ) && 
                (
                    this.DebtToEquityMax == input.DebtToEquityMax ||
                    (this.DebtToEquityMax != null &&
                    this.DebtToEquityMax.Equals(input.DebtToEquityMax))
                ) && 
                (
                    this.GrossMarginMin == input.GrossMarginMin ||
                    (this.GrossMarginMin != null &&
                    this.GrossMarginMin.Equals(input.GrossMarginMin))
                ) && 
                (
                    this.GrossMarginMax == input.GrossMarginMax ||
                    (this.GrossMarginMax != null &&
                    this.GrossMarginMax.Equals(input.GrossMarginMax))
                ) && 
                (
                    this.OperatingMarginMin == input.OperatingMarginMin ||
                    (this.OperatingMarginMin != null &&
                    this.OperatingMarginMin.Equals(input.OperatingMarginMin))
                ) && 
                (
                    this.OperatingMarginMax == input.OperatingMarginMax ||
                    (this.OperatingMarginMax != null &&
                    this.OperatingMarginMax.Equals(input.OperatingMarginMax))
                ) && 
                (
                    this.ProfitMarginMin == input.ProfitMarginMin ||
                    (this.ProfitMarginMin != null &&
                    this.ProfitMarginMin.Equals(input.ProfitMarginMin))
                ) && 
                (
                    this.ProfitMarginMax == input.ProfitMarginMax ||
                    (this.ProfitMarginMax != null &&
                    this.ProfitMarginMax.Equals(input.ProfitMarginMax))
                ) && 
                (
                    this.PriceToSalesMin == input.PriceToSalesMin ||
                    (this.PriceToSalesMin != null &&
                    this.PriceToSalesMin.Equals(input.PriceToSalesMin))
                ) && 
                (
                    this.PriceToSalesMax == input.PriceToSalesMax ||
                    (this.PriceToSalesMax != null &&
                    this.PriceToSalesMax.Equals(input.PriceToSalesMax))
                ) && 
                (
                    this.BuybacksThreeMonthsMin == input.BuybacksThreeMonthsMin ||
                    (this.BuybacksThreeMonthsMin != null &&
                    this.BuybacksThreeMonthsMin.Equals(input.BuybacksThreeMonthsMin))
                ) && 
                (
                    this.BuybacksThreeMonthsMax == input.BuybacksThreeMonthsMax ||
                    (this.BuybacksThreeMonthsMax != null &&
                    this.BuybacksThreeMonthsMax.Equals(input.BuybacksThreeMonthsMax))
                ) && 
                (
                    this.BuybacksSixMonthsMin == input.BuybacksSixMonthsMin ||
                    (this.BuybacksSixMonthsMin != null &&
                    this.BuybacksSixMonthsMin.Equals(input.BuybacksSixMonthsMin))
                ) && 
                (
                    this.BuybacksSixMonthsMax == input.BuybacksSixMonthsMax ||
                    (this.BuybacksSixMonthsMax != null &&
                    this.BuybacksSixMonthsMax.Equals(input.BuybacksSixMonthsMax))
                ) && 
                (
                    this.BuybacksOneYearMin == input.BuybacksOneYearMin ||
                    (this.BuybacksOneYearMin != null &&
                    this.BuybacksOneYearMin.Equals(input.BuybacksOneYearMin))
                ) && 
                (
                    this.BuybacksOneYearMax == input.BuybacksOneYearMax ||
                    (this.BuybacksOneYearMax != null &&
                    this.BuybacksOneYearMax.Equals(input.BuybacksOneYearMax))
                ) && 
                (
                    this.BuybacksTwoYearsMin == input.BuybacksTwoYearsMin ||
                    (this.BuybacksTwoYearsMin != null &&
                    this.BuybacksTwoYearsMin.Equals(input.BuybacksTwoYearsMin))
                ) && 
                (
                    this.BuybacksTwoYearsMax == input.BuybacksTwoYearsMax ||
                    (this.BuybacksTwoYearsMax != null &&
                    this.BuybacksTwoYearsMax.Equals(input.BuybacksTwoYearsMax))
                ) && 
                (
                    this.BuybacksThreeYearsMin == input.BuybacksThreeYearsMin ||
                    (this.BuybacksThreeYearsMin != null &&
                    this.BuybacksThreeYearsMin.Equals(input.BuybacksThreeYearsMin))
                ) && 
                (
                    this.BuybacksThreeYearsMax == input.BuybacksThreeYearsMax ||
                    (this.BuybacksThreeYearsMax != null &&
                    this.BuybacksThreeYearsMax.Equals(input.BuybacksThreeYearsMax))
                ) && 
                (
                    this.BuybacksFiveYearsMin == input.BuybacksFiveYearsMin ||
                    (this.BuybacksFiveYearsMin != null &&
                    this.BuybacksFiveYearsMin.Equals(input.BuybacksFiveYearsMin))
                ) && 
                (
                    this.BuybacksFiveYearsMax == input.BuybacksFiveYearsMax ||
                    (this.BuybacksFiveYearsMax != null &&
                    this.BuybacksFiveYearsMax.Equals(input.BuybacksFiveYearsMax))
                ) && 
                (
                    this.BuybacksTenYearsMin == input.BuybacksTenYearsMin ||
                    (this.BuybacksTenYearsMin != null &&
                    this.BuybacksTenYearsMin.Equals(input.BuybacksTenYearsMin))
                ) && 
                (
                    this.BuybacksTenYearsMax == input.BuybacksTenYearsMax ||
                    (this.BuybacksTenYearsMax != null &&
                    this.BuybacksTenYearsMax.Equals(input.BuybacksTenYearsMax))
                ) && 
                (
                    this.BuybacksTwentyYearsMin == input.BuybacksTwentyYearsMin ||
                    (this.BuybacksTwentyYearsMin != null &&
                    this.BuybacksTwentyYearsMin.Equals(input.BuybacksTwentyYearsMin))
                ) && 
                (
                    this.BuybacksTwentyYearsMax == input.BuybacksTwentyYearsMax ||
                    (this.BuybacksTwentyYearsMax != null &&
                    this.BuybacksTwentyYearsMax.Equals(input.BuybacksTwentyYearsMax))
                ) && 
                (
                    this.PotentialUpside == input.PotentialUpside ||
                    (this.PotentialUpside != null &&
                    this.PotentialUpside.Equals(input.PotentialUpside))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SearchQuery != null)
                    hashCode = hashCode * 59 + this.SearchQuery.GetHashCode();
                if (this.ExchangeIds != null)
                    hashCode = hashCode * 59 + this.ExchangeIds.GetHashCode();
                if (this.SectorIds != null)
                    hashCode = hashCode * 59 + this.SectorIds.GetHashCode();
                if (this.IndustryIds != null)
                    hashCode = hashCode * 59 + this.IndustryIds.GetHashCode();
                if (this.MarketCapMin != null)
                    hashCode = hashCode * 59 + this.MarketCapMin.GetHashCode();
                if (this.MarketCapMax != null)
                    hashCode = hashCode * 59 + this.MarketCapMax.GetHashCode();
                if (this.BetaMin != null)
                    hashCode = hashCode * 59 + this.BetaMin.GetHashCode();
                if (this.BetaMax != null)
                    hashCode = hashCode * 59 + this.BetaMax.GetHashCode();
                if (this.ForwardDividendMin != null)
                    hashCode = hashCode * 59 + this.ForwardDividendMin.GetHashCode();
                if (this.ForwardDividendMax != null)
                    hashCode = hashCode * 59 + this.ForwardDividendMax.GetHashCode();
                if (this.ForwardDividendYieldMin != null)
                    hashCode = hashCode * 59 + this.ForwardDividendYieldMin.GetHashCode();
                if (this.ForwardDividendYieldMax != null)
                    hashCode = hashCode * 59 + this.ForwardDividendYieldMax.GetHashCode();
                if (this.ShortRatioMin != null)
                    hashCode = hashCode * 59 + this.ShortRatioMin.GetHashCode();
                if (this.ShortRatioMax != null)
                    hashCode = hashCode * 59 + this.ShortRatioMax.GetHashCode();
                if (this.SharesShortPercentageMin != null)
                    hashCode = hashCode * 59 + this.SharesShortPercentageMin.GetHashCode();
                if (this.SharesShortPercentageMax != null)
                    hashCode = hashCode * 59 + this.SharesShortPercentageMax.GetHashCode();
                if (this.SharesShortPreviousMonthPercentageMin != null)
                    hashCode = hashCode * 59 + this.SharesShortPreviousMonthPercentageMin.GetHashCode();
                if (this.SharesShortPreviousMonthPercentageMax != null)
                    hashCode = hashCode * 59 + this.SharesShortPreviousMonthPercentageMax.GetHashCode();
                if (this.AnalystRecommendationMin != null)
                    hashCode = hashCode * 59 + this.AnalystRecommendationMin.GetHashCode();
                if (this.AnalystRecommendationMax != null)
                    hashCode = hashCode * 59 + this.AnalystRecommendationMax.GetHashCode();
                if (this.PerformanceOneDayMin != null)
                    hashCode = hashCode * 59 + this.PerformanceOneDayMin.GetHashCode();
                if (this.PerformanceOneDayMax != null)
                    hashCode = hashCode * 59 + this.PerformanceOneDayMax.GetHashCode();
                if (this.PerformanceOneWeekMin != null)
                    hashCode = hashCode * 59 + this.PerformanceOneWeekMin.GetHashCode();
                if (this.PerformanceOneWeekMax != null)
                    hashCode = hashCode * 59 + this.PerformanceOneWeekMax.GetHashCode();
                if (this.PerformanceTwoWeeksMin != null)
                    hashCode = hashCode * 59 + this.PerformanceTwoWeeksMin.GetHashCode();
                if (this.PerformanceTwoWeeksMax != null)
                    hashCode = hashCode * 59 + this.PerformanceTwoWeeksMax.GetHashCode();
                if (this.PerformanceOneMonthMin != null)
                    hashCode = hashCode * 59 + this.PerformanceOneMonthMin.GetHashCode();
                if (this.PerformanceOneMonthMax != null)
                    hashCode = hashCode * 59 + this.PerformanceOneMonthMax.GetHashCode();
                if (this.PerformanceThreeMonthsMin != null)
                    hashCode = hashCode * 59 + this.PerformanceThreeMonthsMin.GetHashCode();
                if (this.PerformanceThreeMonthsMax != null)
                    hashCode = hashCode * 59 + this.PerformanceThreeMonthsMax.GetHashCode();
                if (this.PerformanceOneYearMin != null)
                    hashCode = hashCode * 59 + this.PerformanceOneYearMin.GetHashCode();
                if (this.PerformanceOneYearMax != null)
                    hashCode = hashCode * 59 + this.PerformanceOneYearMax.GetHashCode();
                if (this.PerformanceThreeYearsMin != null)
                    hashCode = hashCode * 59 + this.PerformanceThreeYearsMin.GetHashCode();
                if (this.PerformanceThreeYearsMax != null)
                    hashCode = hashCode * 59 + this.PerformanceThreeYearsMax.GetHashCode();
                if (this.PerformanceFiveYearsMin != null)
                    hashCode = hashCode * 59 + this.PerformanceFiveYearsMin.GetHashCode();
                if (this.PerformanceFiveYearsMax != null)
                    hashCode = hashCode * 59 + this.PerformanceFiveYearsMax.GetHashCode();
                if (this.PerformanceTenYearsMin != null)
                    hashCode = hashCode * 59 + this.PerformanceTenYearsMin.GetHashCode();
                if (this.PerformanceTenYearsMax != null)
                    hashCode = hashCode * 59 + this.PerformanceTenYearsMax.GetHashCode();
                if (this.PerformanceTwentyYearsMin != null)
                    hashCode = hashCode * 59 + this.PerformanceTwentyYearsMin.GetHashCode();
                if (this.PerformanceTwentyYearsMax != null)
                    hashCode = hashCode * 59 + this.PerformanceTwentyYearsMax.GetHashCode();
                if (this.EpsGrowthOneYearMin != null)
                    hashCode = hashCode * 59 + this.EpsGrowthOneYearMin.GetHashCode();
                if (this.EpsGrowthOneYearMax != null)
                    hashCode = hashCode * 59 + this.EpsGrowthOneYearMax.GetHashCode();
                if (this.EpsGrowthTwoYearsMin != null)
                    hashCode = hashCode * 59 + this.EpsGrowthTwoYearsMin.GetHashCode();
                if (this.EpsGrowthTwoYearsMax != null)
                    hashCode = hashCode * 59 + this.EpsGrowthTwoYearsMax.GetHashCode();
                if (this.EpsGrowthThreeYearsMin != null)
                    hashCode = hashCode * 59 + this.EpsGrowthThreeYearsMin.GetHashCode();
                if (this.EpsGrowthThreeYearsMax != null)
                    hashCode = hashCode * 59 + this.EpsGrowthThreeYearsMax.GetHashCode();
                if (this.EpsGrowthFiveYearsMin != null)
                    hashCode = hashCode * 59 + this.EpsGrowthFiveYearsMin.GetHashCode();
                if (this.EpsGrowthFiveYearsMax != null)
                    hashCode = hashCode * 59 + this.EpsGrowthFiveYearsMax.GetHashCode();
                if (this.EpsGrowthTenYearsMin != null)
                    hashCode = hashCode * 59 + this.EpsGrowthTenYearsMin.GetHashCode();
                if (this.EpsGrowthTenYearsMax != null)
                    hashCode = hashCode * 59 + this.EpsGrowthTenYearsMax.GetHashCode();
                if (this.EpsGrowthTwentyYearsMin != null)
                    hashCode = hashCode * 59 + this.EpsGrowthTwentyYearsMin.GetHashCode();
                if (this.EpsGrowthTwentyYearsMax != null)
                    hashCode = hashCode * 59 + this.EpsGrowthTwentyYearsMax.GetHashCode();
                if (this.PeMin != null)
                    hashCode = hashCode * 59 + this.PeMin.GetHashCode();
                if (this.PeMax != null)
                    hashCode = hashCode * 59 + this.PeMax.GetHashCode();
                if (this.PegMin != null)
                    hashCode = hashCode * 59 + this.PegMin.GetHashCode();
                if (this.PegMax != null)
                    hashCode = hashCode * 59 + this.PegMax.GetHashCode();
                if (this.PriceFcfMin != null)
                    hashCode = hashCode * 59 + this.PriceFcfMin.GetHashCode();
                if (this.PriceFcfMax != null)
                    hashCode = hashCode * 59 + this.PriceFcfMax.GetHashCode();
                if (this.BookValuePerShareMin != null)
                    hashCode = hashCode * 59 + this.BookValuePerShareMin.GetHashCode();
                if (this.BookValuePerShareMax != null)
                    hashCode = hashCode * 59 + this.BookValuePerShareMax.GetHashCode();
                if (this.PriceBookValuePerShareMin != null)
                    hashCode = hashCode * 59 + this.PriceBookValuePerShareMin.GetHashCode();
                if (this.PriceBookValuePerShareMax != null)
                    hashCode = hashCode * 59 + this.PriceBookValuePerShareMax.GetHashCode();
                if (this.PayoutMin != null)
                    hashCode = hashCode * 59 + this.PayoutMin.GetHashCode();
                if (this.PayoutMax != null)
                    hashCode = hashCode * 59 + this.PayoutMax.GetHashCode();
                if (this.DebtToEquityMin != null)
                    hashCode = hashCode * 59 + this.DebtToEquityMin.GetHashCode();
                if (this.DebtToEquityMax != null)
                    hashCode = hashCode * 59 + this.DebtToEquityMax.GetHashCode();
                if (this.GrossMarginMin != null)
                    hashCode = hashCode * 59 + this.GrossMarginMin.GetHashCode();
                if (this.GrossMarginMax != null)
                    hashCode = hashCode * 59 + this.GrossMarginMax.GetHashCode();
                if (this.OperatingMarginMin != null)
                    hashCode = hashCode * 59 + this.OperatingMarginMin.GetHashCode();
                if (this.OperatingMarginMax != null)
                    hashCode = hashCode * 59 + this.OperatingMarginMax.GetHashCode();
                if (this.ProfitMarginMin != null)
                    hashCode = hashCode * 59 + this.ProfitMarginMin.GetHashCode();
                if (this.ProfitMarginMax != null)
                    hashCode = hashCode * 59 + this.ProfitMarginMax.GetHashCode();
                if (this.PriceToSalesMin != null)
                    hashCode = hashCode * 59 + this.PriceToSalesMin.GetHashCode();
                if (this.PriceToSalesMax != null)
                    hashCode = hashCode * 59 + this.PriceToSalesMax.GetHashCode();
                if (this.BuybacksThreeMonthsMin != null)
                    hashCode = hashCode * 59 + this.BuybacksThreeMonthsMin.GetHashCode();
                if (this.BuybacksThreeMonthsMax != null)
                    hashCode = hashCode * 59 + this.BuybacksThreeMonthsMax.GetHashCode();
                if (this.BuybacksSixMonthsMin != null)
                    hashCode = hashCode * 59 + this.BuybacksSixMonthsMin.GetHashCode();
                if (this.BuybacksSixMonthsMax != null)
                    hashCode = hashCode * 59 + this.BuybacksSixMonthsMax.GetHashCode();
                if (this.BuybacksOneYearMin != null)
                    hashCode = hashCode * 59 + this.BuybacksOneYearMin.GetHashCode();
                if (this.BuybacksOneYearMax != null)
                    hashCode = hashCode * 59 + this.BuybacksOneYearMax.GetHashCode();
                if (this.BuybacksTwoYearsMin != null)
                    hashCode = hashCode * 59 + this.BuybacksTwoYearsMin.GetHashCode();
                if (this.BuybacksTwoYearsMax != null)
                    hashCode = hashCode * 59 + this.BuybacksTwoYearsMax.GetHashCode();
                if (this.BuybacksThreeYearsMin != null)
                    hashCode = hashCode * 59 + this.BuybacksThreeYearsMin.GetHashCode();
                if (this.BuybacksThreeYearsMax != null)
                    hashCode = hashCode * 59 + this.BuybacksThreeYearsMax.GetHashCode();
                if (this.BuybacksFiveYearsMin != null)
                    hashCode = hashCode * 59 + this.BuybacksFiveYearsMin.GetHashCode();
                if (this.BuybacksFiveYearsMax != null)
                    hashCode = hashCode * 59 + this.BuybacksFiveYearsMax.GetHashCode();
                if (this.BuybacksTenYearsMin != null)
                    hashCode = hashCode * 59 + this.BuybacksTenYearsMin.GetHashCode();
                if (this.BuybacksTenYearsMax != null)
                    hashCode = hashCode * 59 + this.BuybacksTenYearsMax.GetHashCode();
                if (this.BuybacksTwentyYearsMin != null)
                    hashCode = hashCode * 59 + this.BuybacksTwentyYearsMin.GetHashCode();
                if (this.BuybacksTwentyYearsMax != null)
                    hashCode = hashCode * 59 + this.BuybacksTwentyYearsMax.GetHashCode();
                if (this.PotentialUpside != null)
                    hashCode = hashCode * 59 + this.PotentialUpside.GetHashCode();
                return hashCode;
            }
        }
    }
}
