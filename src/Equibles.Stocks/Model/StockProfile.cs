/* 
 * Stocks
 *
 * <h3>Rate limits</h3>                     Free subscriptions are subject to daily limits. To know how much requests you have left look at the following headers in the response.<br />                     1. <strong>x-ratelimit-limit</strong> - The total number of requests that you are allowed to make in a given period (hour/day)<br />                     2. <strong>x-ratelimit-remaining</strong> - The number of remaining requests that you can perform in the current period.<br />                     3. <strong>x-ratelimit-reset</strong> - The number of seconds until the current period resets.<br />                     <br />                     <br />                     You don't have an API key? <a href=\"https://www.equibles.com/api/pricing\" target=\"_blank\">Get one for free here.</a>
 *
 * OpenAPI spec version: v1
 * Contact: contact@equibles.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Equibles.Stocks.Client.SwaggerDateConverter;

namespace Equibles.Stocks.Model
{
    /// <summary>
    /// StockProfile
    /// </summary>
    [DataContract]
        public partial class StockProfile :  IEquatable<StockProfile>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StockProfile" /> class.
        /// </summary>
        /// <param name="logo">logo.</param>
        /// <param name="address">address.</param>
        /// <param name="cik">cik.</param>
        /// <param name="locale">locale.</param>
        /// <param name="marketCap">marketCap.</param>
        /// <param name="sharesOutstandingLast">sharesOutstandingLast.</param>
        /// <param name="phoneNumber">phoneNumber.</param>
        /// <param name="description">description.</param>
        /// <param name="employees">employees.</param>
        /// <param name="delisted">delisted.</param>
        /// <param name="listDate">listDate.</param>
        /// <param name="website">website.</param>
        /// <param name="industry">industry.</param>
        /// <param name="officers">officers.</param>
        /// <param name="ticker">ticker.</param>
        /// <param name="fullTicker">fullTicker.</param>
        /// <param name="assetType">assetType.</param>
        /// <param name="name">name.</param>
        /// <param name="exchange">exchange.</param>
        /// <param name="lastPrice">lastPrice.</param>
        public StockProfile(Image logo = default(Image), string address = default(string), string cik = default(string), string locale = default(string), long? marketCap = default(long?), long? sharesOutstandingLast = default(long?), string phoneNumber = default(string), string description = default(string), long? employees = default(long?), bool? delisted = default(bool?), DateTime? listDate = default(DateTime?), string website = default(string), Industry industry = default(Industry), List<Officer> officers = default(List<Officer>), string ticker = default(string), string fullTicker = default(string), AssetType assetType = default(AssetType), string name = default(string), Exchange exchange = default(Exchange), Price lastPrice = default(Price))
        {
            this.Logo = logo;
            this.Address = address;
            this.Cik = cik;
            this.Locale = locale;
            this.MarketCap = marketCap;
            this.SharesOutstandingLast = sharesOutstandingLast;
            this.PhoneNumber = phoneNumber;
            this.Description = description;
            this.Employees = employees;
            this.Delisted = delisted;
            this.ListDate = listDate;
            this.Website = website;
            this.Industry = industry;
            this.Officers = officers;
            this.Ticker = ticker;
            this.FullTicker = fullTicker;
            this.AssetType = assetType;
            this.Name = name;
            this.Exchange = exchange;
            this.LastPrice = lastPrice;
        }
        
        /// <summary>
        /// Gets or Sets Logo
        /// </summary>
        [DataMember(Name="logo", EmitDefaultValue=false)]
        public Image Logo { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public string Address { get; set; }

        /// <summary>
        /// Gets or Sets Cik
        /// </summary>
        [DataMember(Name="cik", EmitDefaultValue=false)]
        public string Cik { get; set; }

        /// <summary>
        /// Gets or Sets Locale
        /// </summary>
        [DataMember(Name="locale", EmitDefaultValue=false)]
        public string Locale { get; set; }

        /// <summary>
        /// Gets or Sets MarketCap
        /// </summary>
        [DataMember(Name="marketCap", EmitDefaultValue=false)]
        public long? MarketCap { get; set; }

        /// <summary>
        /// Gets or Sets SharesOutstandingLast
        /// </summary>
        [DataMember(Name="sharesOutstandingLast", EmitDefaultValue=false)]
        public long? SharesOutstandingLast { get; set; }

        /// <summary>
        /// Gets or Sets PhoneNumber
        /// </summary>
        [DataMember(Name="phoneNumber", EmitDefaultValue=false)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Employees
        /// </summary>
        [DataMember(Name="employees", EmitDefaultValue=false)]
        public long? Employees { get; set; }

        /// <summary>
        /// Gets or Sets Delisted
        /// </summary>
        [DataMember(Name="delisted", EmitDefaultValue=false)]
        public bool? Delisted { get; set; }

        /// <summary>
        /// Gets or Sets ListDate
        /// </summary>
        [DataMember(Name="listDate", EmitDefaultValue=false)]
        public DateTime? ListDate { get; set; }

        /// <summary>
        /// Gets or Sets Website
        /// </summary>
        [DataMember(Name="website", EmitDefaultValue=false)]
        public string Website { get; set; }

        /// <summary>
        /// Gets or Sets Industry
        /// </summary>
        [DataMember(Name="industry", EmitDefaultValue=false)]
        public Industry Industry { get; set; }

        /// <summary>
        /// Gets or Sets Officers
        /// </summary>
        [DataMember(Name="officers", EmitDefaultValue=false)]
        public List<Officer> Officers { get; set; }

        /// <summary>
        /// Gets or Sets Ticker
        /// </summary>
        [DataMember(Name="ticker", EmitDefaultValue=false)]
        public string Ticker { get; set; }

        /// <summary>
        /// Gets or Sets FullTicker
        /// </summary>
        [DataMember(Name="fullTicker", EmitDefaultValue=false)]
        public string FullTicker { get; set; }

        /// <summary>
        /// Gets or Sets AssetType
        /// </summary>
        [DataMember(Name="assetType", EmitDefaultValue=false)]
        public AssetType AssetType { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Exchange
        /// </summary>
        [DataMember(Name="exchange", EmitDefaultValue=false)]
        public Exchange Exchange { get; set; }

        /// <summary>
        /// Gets or Sets LastPrice
        /// </summary>
        [DataMember(Name="lastPrice", EmitDefaultValue=false)]
        public Price LastPrice { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StockProfile {\n");
            sb.Append("  Logo: ").Append(Logo).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Cik: ").Append(Cik).Append("\n");
            sb.Append("  Locale: ").Append(Locale).Append("\n");
            sb.Append("  MarketCap: ").Append(MarketCap).Append("\n");
            sb.Append("  SharesOutstandingLast: ").Append(SharesOutstandingLast).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Employees: ").Append(Employees).Append("\n");
            sb.Append("  Delisted: ").Append(Delisted).Append("\n");
            sb.Append("  ListDate: ").Append(ListDate).Append("\n");
            sb.Append("  Website: ").Append(Website).Append("\n");
            sb.Append("  Industry: ").Append(Industry).Append("\n");
            sb.Append("  Officers: ").Append(Officers).Append("\n");
            sb.Append("  Ticker: ").Append(Ticker).Append("\n");
            sb.Append("  FullTicker: ").Append(FullTicker).Append("\n");
            sb.Append("  AssetType: ").Append(AssetType).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Exchange: ").Append(Exchange).Append("\n");
            sb.Append("  LastPrice: ").Append(LastPrice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StockProfile);
        }

        /// <summary>
        /// Returns true if StockProfile instances are equal
        /// </summary>
        /// <param name="input">Instance of StockProfile to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StockProfile input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Logo == input.Logo ||
                    (this.Logo != null &&
                    this.Logo.Equals(input.Logo))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.Cik == input.Cik ||
                    (this.Cik != null &&
                    this.Cik.Equals(input.Cik))
                ) && 
                (
                    this.Locale == input.Locale ||
                    (this.Locale != null &&
                    this.Locale.Equals(input.Locale))
                ) && 
                (
                    this.MarketCap == input.MarketCap ||
                    (this.MarketCap != null &&
                    this.MarketCap.Equals(input.MarketCap))
                ) && 
                (
                    this.SharesOutstandingLast == input.SharesOutstandingLast ||
                    (this.SharesOutstandingLast != null &&
                    this.SharesOutstandingLast.Equals(input.SharesOutstandingLast))
                ) && 
                (
                    this.PhoneNumber == input.PhoneNumber ||
                    (this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(input.PhoneNumber))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Employees == input.Employees ||
                    (this.Employees != null &&
                    this.Employees.Equals(input.Employees))
                ) && 
                (
                    this.Delisted == input.Delisted ||
                    (this.Delisted != null &&
                    this.Delisted.Equals(input.Delisted))
                ) && 
                (
                    this.ListDate == input.ListDate ||
                    (this.ListDate != null &&
                    this.ListDate.Equals(input.ListDate))
                ) && 
                (
                    this.Website == input.Website ||
                    (this.Website != null &&
                    this.Website.Equals(input.Website))
                ) && 
                (
                    this.Industry == input.Industry ||
                    (this.Industry != null &&
                    this.Industry.Equals(input.Industry))
                ) && 
                (
                    this.Officers == input.Officers ||
                    this.Officers != null &&
                    input.Officers != null &&
                    this.Officers.SequenceEqual(input.Officers)
                ) && 
                (
                    this.Ticker == input.Ticker ||
                    (this.Ticker != null &&
                    this.Ticker.Equals(input.Ticker))
                ) && 
                (
                    this.FullTicker == input.FullTicker ||
                    (this.FullTicker != null &&
                    this.FullTicker.Equals(input.FullTicker))
                ) && 
                (
                    this.AssetType == input.AssetType ||
                    (this.AssetType != null &&
                    this.AssetType.Equals(input.AssetType))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Exchange == input.Exchange ||
                    (this.Exchange != null &&
                    this.Exchange.Equals(input.Exchange))
                ) && 
                (
                    this.LastPrice == input.LastPrice ||
                    (this.LastPrice != null &&
                    this.LastPrice.Equals(input.LastPrice))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Logo != null)
                    hashCode = hashCode * 59 + this.Logo.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.Cik != null)
                    hashCode = hashCode * 59 + this.Cik.GetHashCode();
                if (this.Locale != null)
                    hashCode = hashCode * 59 + this.Locale.GetHashCode();
                if (this.MarketCap != null)
                    hashCode = hashCode * 59 + this.MarketCap.GetHashCode();
                if (this.SharesOutstandingLast != null)
                    hashCode = hashCode * 59 + this.SharesOutstandingLast.GetHashCode();
                if (this.PhoneNumber != null)
                    hashCode = hashCode * 59 + this.PhoneNumber.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Employees != null)
                    hashCode = hashCode * 59 + this.Employees.GetHashCode();
                if (this.Delisted != null)
                    hashCode = hashCode * 59 + this.Delisted.GetHashCode();
                if (this.ListDate != null)
                    hashCode = hashCode * 59 + this.ListDate.GetHashCode();
                if (this.Website != null)
                    hashCode = hashCode * 59 + this.Website.GetHashCode();
                if (this.Industry != null)
                    hashCode = hashCode * 59 + this.Industry.GetHashCode();
                if (this.Officers != null)
                    hashCode = hashCode * 59 + this.Officers.GetHashCode();
                if (this.Ticker != null)
                    hashCode = hashCode * 59 + this.Ticker.GetHashCode();
                if (this.FullTicker != null)
                    hashCode = hashCode * 59 + this.FullTicker.GetHashCode();
                if (this.AssetType != null)
                    hashCode = hashCode * 59 + this.AssetType.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Exchange != null)
                    hashCode = hashCode * 59 + this.Exchange.GetHashCode();
                if (this.LastPrice != null)
                    hashCode = hashCode * 59 + this.LastPrice.GetHashCode();
                return hashCode;
            }
        }
    }
}
