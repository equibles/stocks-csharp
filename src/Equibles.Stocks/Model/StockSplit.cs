/* 
 * Stocks
 *
 * <h3>Rate limits</h3>                     Free subscriptions are subject to daily limits. To know how much requests you have left look at the following headers in the response.<br />                     1. <strong>x-ratelimit-limit</strong> - The total number of requests that you are allowed to make in a given period (hour/day)<br />                     2. <strong>x-ratelimit-remaining</strong> - The number of remaining requests that you can perform in the current period.<br />                     3. <strong>x-ratelimit-reset</strong> - The number of seconds until the current period resets.<br />                     <br />                     <br />                     You don't have an API key? <a href=\"https://www.equibles.com/api/pricing\" target=\"_blank\">Get one for free here.</a>
 *
 * OpenAPI spec version: v1
 * Contact: contact@equibles.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Equibles.Stocks.Client.SwaggerDateConverter;

namespace Equibles.Stocks.Model
{
    /// <summary>
    /// StockSplit
    /// </summary>
    [DataContract]
        public partial class StockSplit :  IEquatable<StockSplit>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StockSplit" /> class.
        /// </summary>
        /// <param name="executionDate">executionDate.</param>
        /// <param name="forFactor">forFactor.</param>
        /// <param name="toFactor">toFactor.</param>
        public StockSplit(DateTime? executionDate = default(DateTime?), int? forFactor = default(int?), int? toFactor = default(int?))
        {
            this.ExecutionDate = executionDate;
            this.ForFactor = forFactor;
            this.ToFactor = toFactor;
        }
        
        /// <summary>
        /// Gets or Sets ExecutionDate
        /// </summary>
        [DataMember(Name="executionDate", EmitDefaultValue=false)]
        public DateTime? ExecutionDate { get; set; }

        /// <summary>
        /// Gets or Sets ForFactor
        /// </summary>
        [DataMember(Name="forFactor", EmitDefaultValue=false)]
        public int? ForFactor { get; set; }

        /// <summary>
        /// Gets or Sets ToFactor
        /// </summary>
        [DataMember(Name="toFactor", EmitDefaultValue=false)]
        public int? ToFactor { get; set; }

        /// <summary>
        /// Gets or Sets Ratio
        /// </summary>
        [DataMember(Name="ratio", EmitDefaultValue=false)]
        public double? Ratio { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StockSplit {\n");
            sb.Append("  ExecutionDate: ").Append(ExecutionDate).Append("\n");
            sb.Append("  ForFactor: ").Append(ForFactor).Append("\n");
            sb.Append("  ToFactor: ").Append(ToFactor).Append("\n");
            sb.Append("  Ratio: ").Append(Ratio).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StockSplit);
        }

        /// <summary>
        /// Returns true if StockSplit instances are equal
        /// </summary>
        /// <param name="input">Instance of StockSplit to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StockSplit input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ExecutionDate == input.ExecutionDate ||
                    (this.ExecutionDate != null &&
                    this.ExecutionDate.Equals(input.ExecutionDate))
                ) && 
                (
                    this.ForFactor == input.ForFactor ||
                    (this.ForFactor != null &&
                    this.ForFactor.Equals(input.ForFactor))
                ) && 
                (
                    this.ToFactor == input.ToFactor ||
                    (this.ToFactor != null &&
                    this.ToFactor.Equals(input.ToFactor))
                ) && 
                (
                    this.Ratio == input.Ratio ||
                    (this.Ratio != null &&
                    this.Ratio.Equals(input.Ratio))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ExecutionDate != null)
                    hashCode = hashCode * 59 + this.ExecutionDate.GetHashCode();
                if (this.ForFactor != null)
                    hashCode = hashCode * 59 + this.ForFactor.GetHashCode();
                if (this.ToFactor != null)
                    hashCode = hashCode * 59 + this.ToFactor.GetHashCode();
                if (this.Ratio != null)
                    hashCode = hashCode * 59 + this.Ratio.GetHashCode();
                return hashCode;
            }
        }
    }
}
